/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page network_diffs Migration
The new Network Component supports IPv4 and IPv6, whereas previous versions of the Middleware provided support only for IPv4.
Based on this difference, the API has changed which will require either to use a
\ref nw_diffs_compatibility_mode "compatibility mode" to be able to use the new Network Core together with the old API or a
manual change of the user code to reflect the API changes.

The following sections show how to migrate projects from previous versions of the Middleware:
- \ref nw_diffs_project_migration describes how to migrate an MDK Version 5 project from the previous Middleware (v5.x and
  v6.x) to the latest version.
- \ref nw_diffs_porting_rte_lib_functions demonstrates how to port functionality based on the internal library functions to
  the new API.
- \ref nw_diffs_component_migration explains the required code changes for every single software component.
- \ref mig_nw_configuration describes the differences in the configuration files of the Network Component.
- \ref netDebugStdio explains how to use the legacy debug features.


\section nw_diffs_project_migration Project Migration
There is an easy migration path available for users of the Network Component v5 and v6. Simply open the project that is about
to be migrated in µVision. The IDE will show an error message that a software component is not available:

\image html mig_project_open.png "Error message opening a legacy project"

This message is shown because the previous variants \b Debug/Release have been changed to IPv4/IPv6 Debug and IPv4/IPv6
Release. Open the \b Manage \b Run-Time \b Environment window. It will show the same error message in a different way:

\image html mig_rte_open.png "Error message in the Run-Time Environment"


\subsection nw_diffs_select_variant Select a New Core Variant
Select the variant \b IPv4/IPv6 \b Release to get rid of this validation message:

\image html mig_rte_choose_ipv4ipv6_release.png "Manually resolve the error message"


\subsection nw_diffs_compatibility_mode Using the Compatibility Mode
The Network Component v7 contains a compatibility mode that enables you to use the old API with the new Network Core. This
gives you the benefit to use the latest Network library (with all updates and bug fixes) and the new API, while it is not
necessary to change all the legacy code right now. You can mix the old and the new APi on component level, for example using
the new API for TCP sockets while using the old API for the Ethernet interface.

Check the box to use the \b Legacy \b API:

\image html mig_rte_choose_legacy_api.png "Enable to use the Legacy API"

A few legacy API functions cannot be used with the compatibility mode:
- The function telnet_server_message_poll will create errors during compile
- The SNMP Agent will compile but fail at runtime because the MIB table is not registered properly

These example projects will not build:
- <a class="el" href="./_compact__web__server__example.html">HTTP_Server</a>
- <a class="el" href="./_telnet__example.html">Telnet_Server</a>

\note The section \ref nw_diffs_porting_rte_lib_functions explains the details on how to work-around these problems.

\subsection nw_diffs_update_configs Update Configuration Files
After pressing OK, the Project window will look like this:

\image html mig_project_required_changes_new_items.png "Updated Project window"

Two files (for supporting the legacy API) have been added: Net_Legacy.c and Net_Config_Legacy.h. Files with a <b>red icon</b> require your
attention because they are incompatible with this version of the Network Component. You need to update them in order to use
the new component. Refer to \urlout{uv4_ca_updswcmpfiles} for details.

Right-clicking each file will give you the update options:

\image html mig_config_update_merge.png "Update options for configuration files"

\b Update \b Config \b File will simply copy the new configuration file into your project containing the default settings.
The old file with your project's settings will be renamed to Net_Config.c.0000 for example. If you want to manually merge the
two files, you can open this backup file (located in the folder RTE\\Network) and compare it with the new file line by line.

A better way is to use the option \b Update \b Config \b File \b and \b Launch \b Merge. This option is available for µVision
users with version 5.15 and above. Refer to the µVision help \urlout{uv4_dg_mergetoolmnu} for details.

Not all configuration files require a merge, as many of them are compatible. The section \ref mig_nw_configuration describes
the differences in more detail.


\subsection nw_diffs_rtx_configuration Configure Keil RTX
If you use <b>RTX v5</b>, you do not need to change the <b>RTX settings</b>, because all resources are statically allocated.

If you use <b>RTX v4</b>, you must change the following settings in \urlout{RTX-Conf-CM4} file: 

\image html mig_rtx_configuration.png "RTX v4 configuration in RTX_Conf_CM.c"

 - Increase the <b>Number of concurrent running threads</b> by \b 2
 - Increase the <b>Number of threads with user-provided stack size</b> by \b 2
 - Increase <b>Total stack size [bytes] for threads with user-provided stack size</b> by <b>1536 bytes</b> 
 - Enable <b>User Timers</b>

\note Refer to the section \ref nw_resource_requirements for more information.


\subsection nw_diffs_build_and_run Build and Run the Network Project
Finally, after merging the configuration files, you should be able to compile the project and run it on your target hardware:

\image html mig_build_ok.png "Error-free build output"

\note If you see errors/warnings in the \b Build \b Output window, check the section \ref nw_diffs_porting_rte_lib_functions
for details on how to migrate functions that are not covered by the compatibility layer.


\section nw_diffs_porting_rte_lib_functions Porting Library Functionality


\subsection nw_diffs_porting_rte_lib_localm Runtime Configuration Migration
In previous versions of the Network Component (v5 and v6) and in the old RL-ARM networking stack it was possible to get
direct access to a structure called \b LOCALM. This was used to change the configuration of the network interface at runtime.
This is deprecated and the following two control functions have been introduced for runtime configuration. Use:
- \ref netIF_GetOption to get the current value of an interface option and
- \ref netIF_SetOption to set values of an interface option.

For more information on the usage of the two functions refer to \ref nw_runtime_config. The following shows how to migrate
code using \b LOCALM to the new Network Component API.

LOCALM
------
In previous versions, the \n LOCALM structure defined network parameters for all available interfaces (Ethernet, PPP or
SLIP). It was defined as follows:
\code
// Local Machine info
typedef struct localm {
  uint8_t IpAddr [IP4_ADDR_LEN];  // Local IP Address
  uint8_t DefGW  [IP4_ADDR_LEN];  // Default GateWay
  uint8_t NetMask[IP4_ADDR_LEN];  // Net Mask
  uint8_t PriDNS [IP4_ADDR_LEN];  // Primary DNS Server
  uint8_t SecDNS [IP4_ADDR_LEN];  // Secondary DNS Server
} LOCALM;
\endcode

Access to the structure was directly available using:
\code
localm[NETIF_ETH]  // parameters for Ethernet interface
localm[NETIF_PPP]  // parameters for PPP interface 
localm[NETIF_SLIP] // parameters for SLIP interface
\endcode

\b Code \b Examples

\b Previous \b Versions
\code
extern LOCALM localm[];
uint8_t ip_addr[IP4_ADDR_LEN];
 
// Read IP address
memcpy (ip_addr, localm[NETIF_ETH].IpAddr, IP4_ADDR_LEN);
 
// Write IP address
memcpy (localm[NETIF_ETH].IpAddr, ip_addr, IP4_ADDR_LEN);
\endcode

\b Network \b Component \b  v7
\code
uint8_t ip_addr[NET_ADDR_IP4_LEN];
 
// Read IP address
netIF_GetOption (NET_IF_CLASS_ETH | 0, netIF_OptionIP4_Address, ip_addr, NET_ADDR_IP4_LEN);
 
// Write IP address
netIF_SetOption (NET_IF_CLASS_ETH | 0, netIF_OptionIP4_Address, ip_addr, NET_ADDR_IP4_LEN);
\endcode


\subsection nw_diffs_porting_rte_lib_socket TCP Socket Access Migration
The example projects for \b HTTP and \b Telnet \b Server previously accessed the TCP socket control block directly (using
tcp_config and TCP_INFO). This is deprecated in Network Component v7. New API functions have been introduced for that purpose:
- \ref netTCP_GetState     - reads active socket state
- \ref netTCP_GetLocalPort - reads a local communication port 
- \ref netTCP_GetPeer      - reads peer information (IP address and port number) 
- \ref netTCP_GetTimer     - reads socket timeout timer

\b Code \b Examples

The current state of a particular TCP socket can be determined using the function \ref netTCP_GetState. If the function
returns \ref netTCP_StateINVALID, the socket is not available (not in the range of sockets specified in Net_Config_TCP.h).
For example, this can be used to determine the maximum number of available TCP sockets:

\b Previous \b Versions
\code
#define tcp_NumSocks tcp_config.NumSocks;
:
do {
  // Process socket information
} while (++socket < tcpNumSocks)
\endcode

\b Network \b Component \b  v7
\code
do {
  // Process socket information
} while (netTCP_GetState (++socket) != netTCP_StateINVALID);
\endcode


\subsection nw_diffs_porting_rte_lib_httptelnet HTTP/Telnet Server Migration
The example projects for \b HTTP and \b Telnet \b Server previously used internal functionality to access the server
authentication and the user password  (using http_config, and tnet_config). This is deprecated in Network Component v7. Use
the following new API functions instead:
- \ref netHTTPs_LoginActive   - determines if the HTTP server authentication is enabled
- \ref netHTTPs_SetPassword   - sets the password of the built-in user account
- \ref netTELNETs_LoginActive - determines if the Telnet server authentication is enabled 
- \ref netTELNETs_SetPassword - sets the password of the built-in user account

\b Code \b Examples

\b Previous \b Versions
\code
#define http_EnAuth http_config.EnAuth;
:
if (http_EnAuth != 0) {
  strcpy (http_auth_passw, passw);
}
\endcode

\b Network \b Component \b  v7
\code
if (netHTTPs_LoginActive () == true) {
  netHTTPs_SetPassword (passw);
}
\endcode


\section nw_diffs_component_migration Component Migration
This section shows how to migrate each software component of the Network separately. \ref nw_diffs_compatibility_mode, it is
possible to mix old (v5/v6) and new API calls in the same project. This enables the user to change to the new API on a
component level which reduces risk and required time for the migration.

In general, all function names are changed according to a new naming convention. Most functions are compatible, with the
exception of a few, where parameters are changed and optimized. Parameters providing an IP address and a port are replaced
with a single structure \ref NET_ADDR that contains both, the IP address and port number.

Usually, functions are now RTOS thread-safe and can be called from different threads.

For a function-by-function comparison visit the appropriate reference sections:
- \ref rl_tcpnet2IPv6
- \ref legacy2IPv6


\subsection nw_diffs_component_core Network Core Functions
The Network v7 Core runs in \b event-driven mode in a separate thread (\b netCore_Thread, thread-safe) which is created by
the \ref netInitialize function. Core processing is triggered using a timer tick every 100ms, or when a packet is received.
Otherwise, \b netCore_Thread is idle. The function \b net_main is removed. 

The following API functions are added:
- \ref netSYS_GetHostName
- \ref netSYS_SetHostName


\b Code \b Examples

\b Previous \b Versions
\code
int main (void) {
  net_initialize();
 
  while(1) {
    net_main ();
  }
}
\endcode

\b Network \b Component \b  v7
\code
int main (void) {
  netInitialize();
 
  while(1) {
    // do anything
  }
}
\endcode


\subsection nw_diffs_component_http HTTP Server
Previous versions started the HTTP server automatically in net_initialize. Now it is required to start the HTTP server either
using:
- A configuration setting to start system services in \b %Net_Config.c:
  \code
  #define NET_START_SERVICE     1
  \endcode
  or
- Manual service start in the application code: 
  \code
  netHTTPs_Start ();
  \endcode

\url{MW-FileSystem} interface functions are renamed and compatible:
| Old API | v7 API |
|---------|--------|
| \c http_server_fopen  | \ref netHTTPs_fopen
| \c http_server_fclose | \ref netHTTPs_fclose
| \c http_server_fread  | \ref netHTTPs_fread
| \c http_server_fgets  | \ref netHTTPs_fgets
| \c http_server_ftime  | \ref netHTTPs_fstat

\note \c netHTTPs_fstat is incompatible with the previous version. It is changed to provide the file size and file time.

The following API functions are added:
- \ref netHTTPs_Start enables the HTTP server at runtime
- \ref netHTTPs_Stop disables HTTP server at runtime
- \ref netHTTPs_Running checks whether the HTTP server is running
- \ref netHTTPs_GetPort returns the port of the HTTP server
- \ref netHTTPs_SetPort sets the port of the HTTP server
- \ref netHTTPs_GetRootPath returns the path to the root folder of the HTTP server
- \ref netHTTPs_SetRootPath sets the path to the root folder of the HTTP server
- \ref netHTTPs_GetUsername returns the user name of the built-in user
- \ref netHTTPs_SetUsername sets the user name of the built-in user
- \ref netHTTPs_GetPassword returns the password of the built-in user
- \ref netHTTPs_SetPassword sets the password of the built-in user
- \ref netHTTPs_LoginActive checks if the HTTP server is set up for user authentication
- \ref netHTTPs_LoginOnOff toggles the user authentication on the HTTP server
- \ref netCGI_Redirect redirects URL addresses of a missing resource to a new location

\subsection nw_diffs_component_ftps FTP Server
Previous versions started the FTP server automatically in net_initialize. Now it is required to start the FTP server either
using:
- A configuration setting to start system services in \b %Net_Config.c:
  \code
  #define NET_START_SERVICE     1
  \endcode
  or
- Manual service start in the application code: 
  \code
  netFTPs_Start ();
  \endcode

The \url{MW-FileSystem} interface functions are renamed and compatible:
| Old API | v7 API |
|---------|--------|
| \c ftp_server_fopen   | \ref netFTPs_fopen
| \c ftp_server_fclose  | \ref netFTPs_fclose
| \c ftp_server_fread   | \ref netFTPs_fread
| \c ftp_server_fwrite  | \ref netFTPs_fwrite
| \c ftp_server_fdelete | \ref netFTPs_fdelete
| \c ftp_server_frename | \ref netFTPs_frename
| \c ftp_server_mkdir   | \ref netFTPs_mkdir
| \c ftp_server_rmdir   | \ref netFTPs_rmdir
| \c ftp_server_ffind   | \ref netFTPs_ffind

\note \c netFTPs_ffind is incompatible with the previous version. It is changed to provide the file name, file size and file time.

The following API functions are added:
- \ref netFTPs_Start enables the FTP server at runtime
- \ref netFTPs_Stop disables FTP server at runtime
- \ref netFTPs_Running checks whether the FTP server is running
- \ref netFTPs_GetPort returns the port of the FTP server
- \ref netFTPs_SetPort sets the port of the FTP server
- \ref netFTPs_GetRootPath returns the path to the root folder of the FTP server
- \ref netFTPs_SetRootPath sets the path to the root folder of the FTP server
- \ref netFTPs_GetUsername returns the user name of the built-in user
- \ref netFTPs_SetUsername sets the user name of the built-in user
- \ref netFTPs_GetPassword returns the password of the built-in user
- \ref netFTPs_SetPassword sets the password of the built-in user
- \ref netFTPs_LoginActive checks if the FTP server is set up for user authentication
- \ref netFTPs_LoginOnOff toggles the user authentication on the FTP server

\subsection nw_diffs_component_ftpc FTP Client
The \url{MW-FileSystem} interface functions are renamed and compatible:
| Old API | v7 API |
|---------|--------|
| \c ftp_client_fopen  | \ref netFTPc_fopen
| \c ftp_client_fclose | \ref netFTPc_fclose
| \c ftp_client_fread  | \ref netFTPc_fread
| \c ftp_client_fwrite | \ref netFTPc_fwrite


\subsection nw_diffs_component_tftps TFTP Server
Previous versions started the TFTP server automatically in net_initialize. Now it is required to start the TFTP server either
using:
- A configuration setting to start system services in \b %Net_Config.c:
  \code
  #define NET_START_SERVICE     1
  \endcode
  or
- Manual service start in the application code: 
  \code
  netTFTPs_Start ();
  \endcode

The \url{MW-FileSystem} interface functions are renamed and compatible:
| Old API | v7 API |
|---------|--------|
| \c tftp_server_fopen  | \ref netTFTPs_fopen
| \c tftp_server_fclose | \ref netTFTPs_fclose
| \c tftp_server_fread  | \ref netTFTPs_fread
| \c tftp_server_fwrite | \ref netTFTPs_fwrite

The following API functions are added:
- \ref netTFTPs_Start enables the TFTP server at runtime
- \ref netTFTPs_Stop disables TFTP server at runtime
- \ref netTFTPs_Running checks whether the TFTP server is running
- \ref netTFTPs_GetPort returns the port of the TFTP server
- \ref netTFTPs_SetPort sets the port of the TFTP server
- \ref netTFTPs_GetRootPath returns the path to the root folder of the TFTP server
- \ref netTFTPs_SetRootPath sets the path to the root folder of the TFTP server


\subsection nw_diffs_component_tftpc TFTP Client
The \url{MW-FileSystem} interface functions are renamed and compatible:
| Old API | v7 API |
|---------|--------|
| \c tftp_client_fopen  | \ref netTFTPc_fopen
| \c tftp_client_fclose | \ref netTFTPc_fclose
| \c tftp_client_fread  | \ref netTFTPc_fread
| \c tftp_client_fwrite | \ref netTFTPc_fwrite


\subsection nw_diffs_component_telnet Telnet Server
Previous versions started the Telnet server automatically in net_initialize. Now it is required to start the Telnet server
either using:
- A configuration setting to start system services in \b %Net_Config.c:
  \code
  #define NET_START_SERVICE     1
  \endcode
  or
- Manual service start in the application code: 
  \code
  netTELNETs_Start ();
  \endcode

The following API functions are added:
- \ref netTELNETs_Start enables the TELNET server at runtime
- \ref netTELNETs_Stop disables TELNET server at runtime
- \ref netTELNETs_Running checks whether the TELNET server is running
- \ref netTELNETs_GetPort returns the port of the TELNET server
- \ref netTELNETs_SetPort sets the port of the TELNET server
- \ref netTELNETs_GetUsername returns the user name of the built-in user
- \ref netTELNETs_SetUsername sets the user name of the built-in user
- \ref netTELNETs_GetPassword returns the password of the built-in user
- \ref netTELNETs_SetPassword sets the password of the built-in user
- \ref netTELNETs_LoginActive checks if the TELNET server is set up for user authentication
- \ref netTELNETs_LoginOnOff toggles the user authentication on the TELNET server
- \ref netTELNETs_RequestMessage passes unsolicited messages to the Telnet server


\subsection nw_diffs_component_snmp SNMP Agent
SNMP-MIB definitions are renamed and are compatible:
| Old API | v7 API |
|---------|--------|
| \c MIB_INTEGER    | \ref NET_SNMP_MIB_INTEGER
| \c MIB_OCTET_STR  | \ref NET_SNMP_MIB_OCTET_STR
| \c MIB_OBJECT_ID  | \ref NET_SNMP_MIB_OBJECT_ID
| \c MIB_IP_ADDR    | \ref NET_SNMP_MIB_IP_ADDR
| \c MIB_COUNTER    | \ref NET_SNMP_MIB_COUNTER
| \c MIB_GAUGE      | \ref NET_SNMP_MIB_GAUGE
| \c MIB_TIME_TICKS | \ref NET_SNMP_MIB_TIME_TICKS
| \c MIB_ATR_RO     | \ref NET_SNMP_MIB_ATR_RO
| \c MIB_OID_SIZE   | \ref NET_SNMP_MIB_OID_SIZE
| \c MIB_STR_SIZE   | \ref NET_SNMP_MIB_STR_SIZE
| \c MIB_READ       | \ref NET_SNMP_MIB_READ
| \c MIB_WRITE      | \ref NET_SNMP_MIB_WRITE

SNMP-MIB macros are renamed and are compatible:
| Old API | v7 API |
|---------|--------|
| \c %MIB_STR(s)         | NET_SNMP_MIB_STR(s)
| \c %MIB_INT(o)         | NET_SNMP_MIB_INT(o)
| \c %MIB_IP(ip)         | NET_SNMP_MIB_IP(ip)
| \c %MIB_OID0(f,s)      | NET_SNMP_MIB_OID0(f,s)
| \c %SNMP_MIB_SIZE(mib) | \a removed

MIB-Entry information typedef \c SNMP_MIB is renamed to \ref NET_SNMP_MIB_INFO.
 
The registering of the MIB data table has changed in the SNMP agent:
- Previous versions used variable names: \c snmp_mib and \c snmp_mib_size,
- Network Component v7 uses \ref netSNMP_SetMIB_Table function to register the MIB data table.

The following API functions are added:
- \ref netSNMP_SetMIB_Table registers SNMP-MIB table in SNMP Agent


\subsection nw_diffs_component_sntp SNTP Client

The following API functions are added:
- \ref netSNTPc_SetMode changes the operation mode of the SNTP client (to unicast/broadcast mode)


\subsection nw_diffs_component_bsd BSD Sockets
The BSD socket API is not changed and is fully backward compatible. It has been extended to support IPv6 addresses without
breaking the existing API.


\subsection nw_diffs_component_tco TCP Sockets
The socket types \c TCP_TYPE_SERVER and \c TCP_TYPE_CLIENT are removed from socket attributes. A socket type is now
implicitly defined when the socket is opened for use:
- \ref netTCP_Listen creates a socket \b SERVER mode
- \ref netTCP_Connect creates socket \b CLIENT mode

The following API functions are added:
- \ref netTCP_SetOption sets different options for a TCP socket
- \ref netTCP_GetPeer provides the IP address and port of a remote client that is connected
- \ref netTCP_GetLocalPort returns the port number of a socket
- \ref netTCP_GetTimer returns the timer value of a time out or the current keep alive value


\subsection nw_diffs_component_udp UDP Sockets
The following API functions are deprecated:
- \b udp_multicast_ttl - use the \ref netUDP_SetOption function to change TTL.

The following API functions are added:
- \ref netUDP_SetOption sets different options for a UDP socket
- \ref netUDP_GetLocalPort returns the port number of a socket


\subsection nw_diffs_component_if Network Interface Functions
The following API functions are added:
- \ref netARP_Probe determines whether the requested IPv4 address is already used in local area network
- \ref netNDP_CacheIP determines whether the NDP table has already an entry for a certain IPv6 address
- \ref netNDP_GetIP determines the resolved IPv6 address for a specific MAC address
- \ref netNDP_GetMAC determines the resolved MAC address for a specific IPv6 address
- \ref netNDP_Probe determines whether the requested IPv6 address is already used in local area network
- \ref netDHCP_Enable starts the DHCP service at runtime
- \ref netIF_GetOption retrieves the current value of a requested option for an interface
- \ref netIF_SetOption sets different options for an interface


\subsection nw_diffs_component_nw_addr Network Address Conversion Functions
The network address conversion functions are similar, but not compatible. The functions in the new API need to provide an
output buffer for the conversion to an ASCII string. The functions are RTOS thread-safe and can be called from different
threads.


\section mig_nw_configuration Network Configuration

Some network configuration files have changed in the Network Component v7. In general, IP address configuration has changed.
The address string has replaced individual address byte configuration. Further details for every configuration file are
explained below.

The following files maintain full compatibility from v5/v6 to v7:
- %Net_Config_BSD.h
- %Net_Config_DNS_Client.h
- %Net_Config_FTP_Client.h
- %Net_Config_SMTP_Client.h
- %Net_Config_TFTP_Client.h
- %Net_Config_UDP.h

\note The following screenshots always show the previous settings on the left hand side, whereas the new settings are shown
on the right hand side.

\subsection mig_nw_configuration_net_config_c Net_Config.c
\image html diff_net_config_c.png "Old Net_Config.c vs. new Net_Config.c"

- \c NET_MEM_SIZE presentation changed from words to bytes
- \c NET_START_SERVICE setting added for compatibility with Network version 5
- \c NET_THREAD_STACK_SIZE and \c NET_THREAD_PRIORITY settings added
- Enumerator \c ERROR_CODE changed to incompatible \c NET_ERROR:
  | Old Enumerator  | New Enumerator |
  |-----------------|:---------------|
  | ERR_MEM_ALLOC   | NET_ERROR_MEM_ALLOC|
  | ERR_MEM_FREE    | NET_ERROR_MEM_FREE| 
  | ERR_MEM_CORRUPT | NET_ERROR_MEM_CORRUPT|
  | ERR_MEM_LOCK    | NET_ERROR_CONFIG (replaced with configuration error)|
  | ERR_UDP_ALLOC   | NET_ERROR_UDP_ALLOC|
  | ERR_TCP_ALLOC   | NET_ERROR_TCP_ALLOC|
  | ERR_TCP_STATE   | NET_ERROR_TCP_STATE|


\subsection mig_nw_configuration_net_config_eth Net_Config_ETH.h
\image html diff_net_config_eth.png "Old Net_Config_ETH.h vs. new Net_Config_ETH.h"

- MAC Address changed to string MAC presentation
- Network version 5 settings moved to IPv4 section
- IP Address, Subnet mask, Default Gateway etc. presentation changed to string
- Added OS Resource Settings with settings for ETH interface thread creation (\c ETH_THREAD_STACK_SIZE and
  \c ETH_THREAD_PRIORITY)


\subsection mig_nw_configuration_net_config_ft_server Net_Config_FTP_Server.h
\image html diff_net_config_ftp_server.png "Old Net_Config_FTP_Server.h vs. new Net_Config_FTP_Server.h"

- Added built-in administrator account enable (\c FTP_SERVER_AUTH_ADMIN added)
- Added Local Root Folder setting (\c FTP_SERVER_ROOT_ENABLE and \c FTP_SERVER_ROOT_FOLDER)


\subsection mig_nw_configuration_net_config_http_server Net_Config_HTTP_Server.h
\image html diff_net_config_http_server.png "Old Net_Config_HTTP_Server.h vs. new Net_Config_HTTP_Server.h"

- Added built-in administrator account enable (\c HTTP_SERVER_AUTH_ADMIN added)
- Added Local Root Folder setting (\c HTTP_SERVER_ROOT_ENABLE and \c HTTP_SERVER_ROOT_FOLDER)


\subsection mig_nw_configuration_net_config_ppp Net_Config_PPP.h
\image html diff_net_config_ppp.png "Old Net_Config_PPP.h vs. new Net_Config_PPP.h"

- IP Address, Subnet mask, Default Gateway etc. presentation changed to string
- Added OS Resource Settings with settings for PPP interface thread creation (\c PPP_THREAD_STACK_SIZE and
  \c PPP_THREAD_PRIORITY)


\subsection mig_nw_configuration_net_config_slip Net_Config_SLIP.h
\image html diff_net_config_slip.png "Old Net_Config_SLIP.h vs. new Net_Config_SLIP.h"

- IP Address, Subnet mask, Default Gateway etc. presentation changed to string
- Added OS Resource Settings with settings for SLIP interface thread creation (\c SLIP_THREAD_STACK_SIZE and
  \c SLIP_THREAD_PRIORITY)


\subsection mig_nw_configuration_net_config_snmp_agent Net_Config_SNMP_Agent.h
\image html diff_net_config_snmp_agent.png "Old Net_Config_SNMP_Agent.h vs. new Net_Config_SNMP_Agent.h"

- Trap Server Address presentation changed to string


\subsection mig_nw_configuration_net_config_sntp_client Net_Config_SNTP_Client.h
\image html diff_net_config_sntp_client.png "Old Net_Config_SNTP_Client.h vs. new Net_Config_SNTP_Client.h"

- NTP Server Address presentation changed to string


\subsection mig_nw_configuration_net_config_tcp Net_Config_TCP.h
In principle, the configuration files are compatible, but the following default settings have changed:
- \b Receive \b Window \b Size changed from 4380 to 4320 octets
- \b Maximum \b Segment \b Size changed from 1460 to 1440 octets

\image html diff_net_config_tcp.png "Old Net_Config_TCP.h vs. new Net_Config_TCP.h"
 

\subsection mig_nw_configuration_net_config_telnet_server Net_Config_Telnet_Server.h
\image html diff_net_config_telnet_server.png "Old Net_Config_Telnet_Server.h vs. new Net_Config_Telnet_Server.h"

- Added built-in administrator account enable (\c TELNET_SERVER_AUTH_ADMIN added)


\subsection mig_nw_configuration_net_config_tftp_server Net_Config_TFTP_Server.h
\image html diff_net_config_tftp_server.png "Old Net_Config_TFTP_Server.h vs. new Net_Config_TFTP_Server.h"

- Added Local Root Folder setting (\c TFTP_SERVER_ROOT_ENABLE and \c TFTP_SERVER_ROOT_FOLDER)


\subsection mig_nw_configuration_net_debug Net_Debug.c
\image html diff_net_debug.png "Old Net_Debug.c vs. new Net_Debug.c"

- Added IPv6 protocols for debugging
- Debug configuration settings reorganized to:
  - System Debug
  - IPv4 Core Debug
  - IPv6 Core Debug
  - Socket Debug
  - Service Debug
  
  
\section netDebugStdio STDIO Debug

STDIO Debug is a legacy debug variant that prints event information as ASCII messages to a standard IO port.
It is generally less feature-rich and slower than the debug with \ref net_evr "Event Recorder" and is not recommended for new projects.

To enable STDIO debugging together with the Network Component, it is required to create an image that generates event information. The necessary steps are:
  1. In the RTE management dialog select the <b>Debug STDIO</b> variant for the <b>Network:Core</b> software component. 
     All necessary files, such as the \b %Net_Debug.c file and the debug library will be automatically added to your project.
  2. In the RTE management dialog enable <b>Compiler:I/O:STDOUT</b> component and select its <b>ITM</b> variant.   
  3. Configure the \ref netDebugLevels "Debug Levels".
  4. Build the application code and download it to the target hardware.

\note
- If the target system has only one serial port that is used by the PPP or SLIP Network Interface, then use \b ITM channel
  for printing debug messages. Otherwise, the debug messages will interfere with the IP packets and the system might
  malfunction or crash. The \b ARM::Compiler component helps you to configure the stdio channel.
- If the debug mode is used on a high traffic LAN, the system might block. Reduce the amount of printed debug messages
  in \b Net_Debug.c configuration or disable the debug mode completely.

\anchor netDebugLevels
Debug Levels
------------
The system is made up of several modules that output debug messages. It is possible to configure the stdio debug output for each
module separately. This can be done in the \b %Net_Debug.c file. There are three debug levels available:
|Level      |Description                                                            |
|-----------|-----------------------------------------------------------------------|
|Off        |The debug messages for the selected module are \b disabled.            |
|Errors Only|Only error messages are output. This mode is useful for error tracking.|
|Full Debug |In this mode, \b all debug messages are output.                        |

The following debug options are available:
- <b>Print Time Stamp</b> switch enables or disables printing the time information with debug messages. If this switch is not
  enabled, the timing information is not printed.
- <b>Debug level</b> for each module defines what kind of debug messages are printed.

The owner module of the displayed debug message is identified by the message prefix. The following system and application
modules are configurable for debugging:
|ID    |Module                 |Description|
|------|-----------------------|-----------|
|MEM   |Memory Management Debug|Allocates and releases frame buffers.|
|ETH   |Ethernet Debug         |Handles Ethernet link.|
|WIFI  |WiFi Debug             |Handles wireless network link.|
|PPP   |PPP Debug              |Handles serial line direct or modem connection PPP link.|
|SLIP  |SLIP Debug             |Handles serial line direct or modem connection SLIP link.|
|LOOP  |Loopback Debug         |Handles localhost loopback interface.|
|ARP   |ARP Debug              |Handles Ethernet MAC address resolution and caching.|
|IP4   |IPv4 Debug             |Processes the IP version 4 network layer.|
|ICMP  |ICMP Debug             |Processes ICMP messages. Best known example is the ping.|
|IGMP  |IGMP Debug             |Processes IGMP messages, Hosts groups and IP Multicasting.|
|IP6   |IPv6 Debug             |Processes the IP version 6 network layer.|
|ICMP6 |ICMPv6 Debug           |Processes ICMP version 6 messages. Best known example is the ping.|
|NDP6  |NDP Debug              |Handles Neighbor Discovery MAC address resolution and caching.|
|UDP   |UDP Debug              |Processes UDP frames.|
|TCP   |TCP Debug              |Processes TCP frames.|
|BSD   |BSD Debug              |Processes TCP and UDP frames via standard BSD Sockets API.|
|NBNS  |NBNS Debug             |The NetBIOS Name Service maintains name access to your hardware.|
|DHCP  |DHCP Debug             |Handles automatic configuration of IP address, Net mask, Default Gateway, and Primary and Secondary DNS servers.|
|DHCP6 |DHCP6 Debug            |Handles automatic configuration of IP address in IP version 6.|
|DNS   |DNS Debug              |Handles the resolution of the IP address from a host name.|
|SNMP  |SNMP Debug             |Manages devices on IP network.|
|HTTP  |HTTP Server Debug      |Delivers web pages on the request to web clients.|
|FTP   |FTP Server Debug       |Manages the files stored on the server and serves the file requests received from the clients.|
|FTPC  |FTP Client Debug       |Connects to FTP server to transfer files on the server, and to manage files stored on the server.|
|TELN  |Telnet Server Debug    |Allows remote clients to control the system using the command line interface.|
|TFTP  |TFTP Server Debug      |A simple service which allows you to send files to or read files from the server.|
|TFTPC |TFTP Client Debug      |Connects to TFTP server to send or receive files.|
|SMTP  |SMTP Client Debug      |Connects to SMTP server to send emails.|
|SNTP  |SNTP Debug             |Manages clock synchronization over the network.|

An example of the debug output is:
\code
015.0 ETH:*** Processing frame ***
015.0 ETH: DstMAC 1E-30-6C-A2-45-5E
015.0 ETH: SrcMAC 00-11-43-A4-FE-40
015.0 ETH: Proto IP4, 66 bytes
015.0 IP4:*** Processing frame ***
015.0 IP4: SrcAddr 192.168.0.5
015.0 IP4: DstAddr 192.168.0.150
015.0 IP4: Proto TCP, Id=0x0622
015.0 IP4: Length 52 bytes
015.0 TCP:*** Processing frame ***
015.0 TCP: Ports  : Src=49232, Dst=80
015.0 TCP: Segment: Seq=0x31EDC88C, Ack=0x0
015.0 TCP: Control: [SYN] Win=8192, Cks=0x0C67
015.0 TCP: Mapped to Socket 1, state LISTEN
015.0 TCP:Process Options, 12 bytes
015.0 TCP: Opt-MSS: 1440
015.0 TCP: SendWin: 8192
015.0 TCP: RTO=4000ms (sa=0, sv=40)
015.0 TCP: Next state SYN_REC
\endcode
In the above example, Ethernet, IP and TCP debug messages are enabled:
- Received Ethernet packets are processed by the Ethernet layer and a debug message containing Ethernet header information is
  printed out. Ethernet debug information contains source and destination MAC address, Ethernet frame length and Ethernet
  protocol type.
- The packet is then passed to the IP layer. IP layer prints out IP debug messages containing the IP header information such
  as source and destination IP address, frame length, protocol type etc.
- When the IP layer has processed the packet, the packet is passed to the upper TCP layer. TCP layer prints out TCP debug
  messages containing the TCP header information such as source and destination ports, sequence and acknowledge numbers,
  checksum value, frame length etc.

Redirecting Output
------------------
Debug messages are output to a standard IO port. The Low level routine \b sendchar
function outputs a single character. If required, you can customize this function to send the debug messages to some other
device. In most cases, a serial ITM debug channel is used to print out the debug messages.

\note
- When the sendchar function runs in polling mode, printing all debug messages significantly reduces the performance. The
  preferred way is to rewrite the sendchar function to work in the interrupt mode.
- Use the <b>highest baud rate</b> possible to reduce the impact on performance from printing the debug messages.
- If the debug mode is enabled and the embedded system is connected to a <b>high traffic LAN</b> with plenty of broadcast
  packets, the system might malfunction.
- Printing debug messages blocks out the system task scheduler during the time when the message is being sent from the serial
  port. The incoming IP packets accumulate in the memory. This soon causes an <b>out of memory </b>error. Any further
  incoming packets are lost until some memory is released.


\section rl_tcpnet2IPv6 Migrating from RL-TCPnet
The following sections describe the changes to the API functions of the Network Component compared to RL-TCPnet, the
Real-Time Library provided with MDK Version 4. Previously, there have been two files carrying the header files:
\ref rtl_rl_net_diffs "rtl.h" and \ref net_config_rl_net_diffs "net_config.h". This has been unified in MDK-ARM Version 5 to
one header file called rl_net.h. The MDK-ARM Version 5 Network Component requires CMSIS-RTOS functionality. Events are no
longer called by interrupt service routines which makes the timing of the overall system more predictable.

The API functions along with the differences are shown in the order:

<hr>
\c RL-TCPnet: MDK-ARM Version 4 with links to the RL-ARM online manual.\n
\c Network \c Component \c v7: IPv4/IPv6 support.\n

Description of the difference (if more than a name change to the new naming convention).
<hr>

\note 
Some API function names are changed to unify the name space of the Software Components.

\subsection rtl_rl_net_diffs Changes from rtl.h 
<hr>
<pre>
rtl.h         // Network API for RL-ARM middleware components (MDK-ARM Version 4)
rl_net.h      // Complete API for Network Component (MDK-ARM Version 5)
</pre>
MDK Middleware now uses a single header file for the Network Component.
<hr>
<pre>
void      \refrlarm{init_TcpNet}   (void)
\ref netStatus  \ref netInitialize (void)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL \refrlarm{main_TcpNet} (void)
\a removed
</pre>
This function is now called internally in Network Component library.

<hr>
<pre>
void \refrlarm{timer_tick} (void)
\em removed
</pre>
The function is now replaced by CMSIS-RTOS functionality and therefore no longer required.

<hr>
<pre>
U8      \refrlarm{udp_get_socket}   (U8 tos, U8 opt, U16 (*listener)(U8 socket, U8 *remip, U16 port, U8 *buf, U16 len))
int32_t  \ref netUDP_GetSocket (netUDP_cb_t cb_func)
</pre>
Return code changed to \a int32_t, removed parameters \a tos and \a opt. Refer to \ref netUDP_cb_t.

<hr>
<pre>
BOOL      \refrlarm{udp_release_socket}   (U8      socket)
\ref netStatus  \ref netUDP_ReleaseSocket (int32_t socket)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{udp_open}    (U8      socket, U16   locport)
\ref netStatus  \ref netUDP_Open (int32_t socket, uint16_t port)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{udp_close}    (U8      socket)
\ref netStatus  \ref netUDP_Close (int32_t socket)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL \refrlarm{udp_mcast_ttl} (U8 socket, U8 ttl)
\em removed
</pre>
Use \ref netUDP_SetOption instead.

<hr>
<pre>
U8      *\refrlarm{udp_get_buf}      (U16      size)
uint8_t * \ref netUDP_GetBuffer (uint32_t size)
</pre>
Identical functionality.

<hr>
<pre>
BOOL      \refrlarm{udp_send}    (U8      socket, U8 *remip, U16 remport, U8      *buf, U16     dlen)
\ref netStatus  \ref netUDP_Send (int32_t socket, const NET_ADDR *addr,   uint8_t *buf, uint32_t len)
</pre>
Return code changed to \ref netStatus and IP address to \ref NET_ADDR.

<hr>
<pre>
U8      \refrlarm{tcp_get_socket}   (U8 type, U8 tos, U16 tout, U16 (*listener)(U8 socket, U8 event, U8 *buf, U16 len))
int32_t  \ref netTCP_GetSocket (netTCP_cb_t cb_func)
</pre>
Return code changed to \a int32_t, removed parameters \a type and \a tos. Refer to \ref netTCP_cb_t.

<hr>
<pre>
BOOL      \refrlarm{tcp_release_socket}   (U8      socket)
\ref netStatus  \ref netTCP_ReleaseSocket (int32_t socket)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{tcp_listen}    (U8      socket, U16   locport)
\ref netStatus  \ref netTCP_Listen (int32_t socket, uint16_t port)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{tcp_connect}    (U8      socket, U8 *remip, U16 remport, U16      locport   )
\ref netStatus  \ref netTCP_Connect (int32_t socket, const NET_ADDR *addr,   uint16_t local_port)
</pre>
Return code changed to \ref netStatus and IP address to \ref NET_ADDR.

<hr>
<pre>
U8      *\refrlarm{tcp_get_buf}      (U16      size)
uint8_t * \ref netTCP_GetBuffer (uint32_t size)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{tcp_max_dsize}            (U8      socket)
uint32_t  \ref netTCP_GetMaxSegmentSize (int32_t socket)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{tcp_check_send}   (U8      socket)
bool  \ref netTCP_SendReady (int32_t socket)
</pre>
Identical functionality.

<hr>
<pre>
U8           \refrlarm{tcp_get_state}   (U8      socket)
\ref netTCP_State  \ref netTCP_GetState (int32_t socket)
</pre>
Return code changed to \ref netTCP_State.

<hr>
<pre>
BOOL      \refrlarm{tcp_send}    (U8      socket, U8      *buf, U16     dlen)
\ref netStatus  \ref netTCP_Send (int32_t socket, uint8_t *buf, uint32_t len)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{tcp_close}    (U8      socket)
\ref netStatus  \ref netTCP_Close (int32_t socket)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{tcp_abort}    (U8      socket)
\ref netStatus  \ref netTCP_Abort (int32_t socket)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
void      \refrlarm{tcp_reset_window}          (U8      socket)
\ref netStatus  \ref netTCP_ResetReceiveWindow (int32_t socket)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{arp_cache_ip}   (                       U8      *ipadr,    U8               type)
\ref netStatus  \ref netARP_CacheIP (uint32_t if_num, const uint8_t *ip4_addr, netARP_CacheType type)
</pre>
- Return code changed to \ref netStatus.
- Added \a if_num specifying the network interface number
- Using \ref netARP_CacheType enum now

<hr>
<pre>
BOOL      \refrlarm{arp_cache_mac}   (                       U8      *hwadr)
\ref netStatus  \ref netARP_CacheMAC (uint32_t if_num, const uint8_t *mac_addr)
</pre>
- Return code changed to \ref netStatus.
- Added \a if_num specifying the network interface number.

<hr>
<pre>
void      \refrlarm{ppp_listen}     (const char *user,     const char *passw)
\ref netStatus  \ref netPPP_Listen  (const char *username, const char *password)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
void      \refrlarm{ppp_connect}    (const char *dialnum,  const char *user,     const char *passw)
\ref netStatus  \ref netPPP_Connect (const char *dial_num, const char *username, const char *password)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
void      \refrlarm{ppp_close}    (void)
\ref netStatus  \ref netPPP_Close (void)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
void      \refrlarm{slip_listen}    (void)
\ref netStatus  \ref netSLIP_Listen (void)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
void      \refrlarm{slip_connect}    (const char *dialnum)
\ref netStatus  \ref netSLIP_Connect (const char *dial_num)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
void      \refrlarm{slip_close}    (void)
\ref netStatus  \ref netSLIP_Close (void)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
U8        \refrlarm{get_host_by_name}      (U8         *hostn,                    void (*cbfunc)(U8 event, U8 *host_ip))
\ref netStatus  \ref netDNSc_GetHostByName (const char *name, int16_t addr_type,  netDNSc_cb_t cb_func)
</pre>
 - Return code changed to \ref netStatus.
 - Adder parameter \c addr_type.
 - Event definitions changed to \ref netDNSc_Event (see \ref netDNSc_cb_t).

<hr>
<pre>
BOOL      \refrlarm{smtp_connect}     (U8 *ipadr, U16 port, void (*cbfunc)(U8 event))
\ref netStatus  \ref netSMTPc_Connect (const NET_ADDR *addr)
</pre>
- Return code changed to \ref netStatus.
- Function callback parameter removed.
- New function \ref netSMTPc_Notify added for that purpose.

<hr>
<pre>
void      \refrlarm{dhcp_disable}    (void)
\ref netStatus  \ref netDHCP_Disable (uint32_t if_num)
</pre>
- Return code changed to \ref netStatus.
- The argument \a if_num specifies the network interface number.

<hr>
<pre>
BOOL      \refrlarm{igmp_join}    (                       U8      *group_ip)
\ref netStatus  \ref netIGMP_Join (uint32_t if_num, const uint8_t *ip4_addr)
</pre>
- Return code changed to \ref netStatus.
- The argument \a if_num specifies the network interface number.

<hr>
<pre>
BOOL      \refrlarm{igmp_leave}    (                       U8      *group_ip)
\ref netStatus  \ref netIGMP_Leave (uint32_t if_num, const uint8_t *ip4_addr)
</pre>
- Return code changed to \ref netStatus.
- The argument \a if_num specifies the network interface number.

<hr>
<pre>
BOOL      \refrlarm{snmp_trap}    (      U8 *manager_ip, U8     gen_trap, U8     spec_trap,       U16      *obj_list)
\ref netStatus  \ref netSNMP_Trap (const NET_ADDR *addr, uint8_t generic, uint8_t specific, const uint16_t *obj_list)
</pre>
- Return code changed to \ref netStatus
- Changed trap manager IP address to \ref NET_ADDR

<hr>
<pre>
BOOL      \refrlarm{snmp_set_community}   (const char *community)
\ref netStatus  \ref netSNMP_SetCommunity (const char *community)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
BOOL      \refrlarm{icmp_ping}    (      U8      *remip, void (*cbfunc)(U8 event))
\ref netStatus  \ref netPing_Echo (const NET_ADDR *addr, netPing_cb_t cb_func)
</pre>
- Return code changed to \ref netStatus.
- Event definitions changed (refer to \ref netPing_cb_t).

<hr>
<pre>
BOOL      \refrlarm{ftpc_connect}    (U8 *ipadr, U16 port,  U8             command, void (*cbfunc)(U8 event))
\ref netStatus  \ref netFTPc_Connect (const NET_ADDR *addr, netFTP_Command command)
</pre>
- Return code changed to \ref netStatus.
- Command definitions changed enum \ref netFTP_Command.
- Function callback parameter removed. New function \ref netFTPc_Notify added for that purpose.

<hr>
<pre>
BOOL      \refrlarm{tftpc_put}    (U8 *ipadr, U16  port, const char *src,   const char *dst,       void (*cbfunc)(U8 event))
\ref netStatus  \ref netTFTPc_Put (const NET_ADDR *addr, const char *fname, const char *local_fname)
</pre>
- Return code changed to \ref netStatus.
- Function callback parameter removed. New function \ref netTFTPc_Notify added for that purpose.

<hr>
<pre>
BOOL      \refrlarm{tftpc_get}    (U8 *ipadr, U16  port, const char *src,   const char *dst,       void (*cbfunc)(U8 event))
\ref netStatus  \ref netTFTPc_Get (const NET_ADDR *addr, const char *fname, const char *local_fname)
</pre>
- Return code changed to \ref netStatus.
- Function callback parameter removed. New function \ref netTFTPc_Notify added for that purpose.

<hr>
<pre>
BOOL      \refrlarm{sntp_get_time}    (      U8      *ipadr, void (*cbfunc)(U32 utc_time))
\ref netStatus  \ref netSNTPc_GetTime (const NET_ADDR *addr, netSNTPc_cb_t cb_func)
</pre>
- Return code changed to \ref netStatus
- IP address changed to \ref NET_ADDR

<hr>
<pre>
void \refrlarm{ftp_evt_notify} (U8            evt)
void  \ref netFTPs_Notify (netFTPs_Event event)
</pre>
Event definitions changed to enum \ref netFTPs_Event.

<hr>
<pre>
const char *http_encoding  (void)
const char *\ref netCGI_Charset (void)
</pre>
Identical functionality.

<hr>
BSD socket functions
--------------------
<pre>
</pre>
Return code changed from SCK_Exxx to BSD_ERROR_xxx.

\subsection net_config_rl_net_diffs Changes from net_config.h 
<hr>
<pre>
net_config.h     // Common TCPnet definitions (MDK-ARM Version 4)
rl_net_ds.h      // Complete API for Network Component (MDK-ARM Version 5, Dual-Stack)
</pre>
MDK Middleware now uses a single header file for the Network Component.

<hr>
<pre>
void \refrlarm{dhcp_cbfunc}    (                 U8         opt,       U8      *val, U16      len)
void  \ref netDHCP_Notify (uint32_t if_num, uint8_t option, const uint8_t *val, uint32_t len)
</pre>
- Added \a if_num specifying the network interface number.

<hr>
<pre>
void *\refrlarm{http_fopen}     (      U8   *name)
void * \ref netHTTPs_fopen (const char *fname)
</pre>
Identical functionality.

<hr>
<pre>
void \refrlarm{http_fclose}     (void *file)
void  \ref netHTTPs_fclose (void *file)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{http_fread}     (void *file, U8      *buf, U16      len)
uint32_t  \ref netHTTPs_fread (void *file, uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
BOOL  \refrlarm{http_fgets}     (void *file, U8   *buf, U16      size)
char  *\ref netHTTPs_fgets (void *file, char *buf, uint32_t size)
</pre>
Return code changed to \c *char.

<hr>
<pre>
U32  \refrlarm{http_finfo}     (      U8   *name)
void  \ref netHTTPs_fstat (const char *fname, uint32_t *fsize, uint32_t *ftime)
</pre>
- Added parameters \c *fsize and \c *ftime.
- Return code removed.

<hr>
<pre>
void \refrlarm{cgi_process_var}     (      U8   *qstr)
void  \ref netCGI_ProcessQuery (const char *qstr)
</pre>
Identical functionality.

<hr>
<pre>
void \refrlarm{cgi_process_data}   (U8      code,       U8   *dat,  U16      len)
void  \ref netCGI_ProcessData (uint8_t code, const char *data, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{cgi_func}      (      U8   *env, U8   *buf, U16       buflen, U32      *pcgi)
uint32_t  \ref netCGI_Script (const char *env, char *buf, uint32_t buf_len, uint32_t *pcgi)
</pre>
Identical functionality.

<hr>
<pre>
      U8   *\refrlarm{cgx_content_type}   (void)
const char * \ref netCGX_ContentType (void)
</pre>
Return code changed to \c const \c char *.

<hr>
<pre>
BOOL \refrlarm{http_accept_host}      (U8 *rem_ip, U16 rem_port)
bool  \ref netHTTPs_AcceptClient (const NET_ADDR *addr)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{http_file_access}    (U8 *fname, U8 user_id)
bool  \ref netHTTPs_FileAccess (uint8_t user_id, const char *fname)
</pre>
Identical functionality.

<hr>
<pre>
U8      \refrlarm{http_check_account}    (      U8   *user,           U8   *passw)
uint8_t  \ref netHTTPs_CheckAccount (const char *username, const char *password)
</pre>
Identical functionality.

<hr>
<pre>
      U8   *\refrlarm{http_get_var}     (      U8   *env, void *ansi, U16      maxlen)
const char * \ref netCGI_GetEnvVar (const char *env, char *ansi, uint32_t max_len)
</pre>
Return code changed to \c const \c char *.

<hr>
<pre>
      U8   *\refrlarm{http_get_lang}        (void)
const char * \ref netHTTPs_GetLanguage (void)
</pre>
Return code changed to \c const \c char *.

<hr>
<pre>
void      \refrlarm{http_get_info}      (REMOTEM *info)
\ref netStatus  \ref netHTTPs_GetClient (NET_ADDR *addr, uint32_t addr_len)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
U8      \refrlarm{http_get_session}    (void)
int32_t  \ref netHTTPs_GetSession (void)
</pre>
Identical functionality.

<hr>
<pre>
U8      \refrlarm{http_get_user_id}   (void)
uint8_t  \ref netHTTPs_GetUserId (void)
</pre>
Identical functionality.

<hr>
<pre>
      U8   *\refrlarm{http_get_content_type}   (void)
const char * \ref netHTTPs_GetContentType (void)
</pre>
Return code changed to \c const \c char *.

<hr>
<pre>
U32  \refrlarm{http_date} (RL_TIME *time)
\em removed
</pre>

<hr>
<pre>
U16      \refrlarm{tnet_cbfunc}               (U8                code, U8   *buf, U16      buflen)
uint32_t  \ref netTELNETs_ProcessMessage (netTELNETs_Message msg, char *buf, uint32_t buf_len)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{tnet_process_cmd}          (      U8   *cmd, U8   *buf, U16      buflen,  U32      *pvar)
uint32_t  \ref netTELNETs_ProcessCommand (const char *cmd, char *buf, uint32_t buf_len, uint32_t *pvar)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{tnet_ccmp}               (      U8   *buf,       U8   *cmd)
bool  \ref netTELNETs_CheckCommand (const char *cmd, const char *user_cmd)
</pre>
Identical functionality.

<hr>
<pre>
void \refrlarm{tnet_set_delay} (U16 cnt)
\em removed
</pre>
Use \ref netTELNETs_RepeatCommand instead.

<hr>
<pre>
void      \refrlarm{tnet_get_info}        (REMOTEM *info)
\ref netStatus  \ref netTELNETs_GetClient (NET_ADDR *addr, uint32_t addr_len)
</pre>
Return code changed to \ref netStatus.

<hr>
<pre>
\em new
int32_t \ref netTELNETs_GetSession (void)
</pre>
Identical functionality.

<hr>
<pre>
U8      \refrlarm{tnet_get_user_id}     (void)
uint8_t  \ref netTELNETs_GetUserId (void)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{tnet_msg_poll} (U8 session)
\em removed
</pre>
Use \ref netTELNETs_RequestMessage instead.

<hr>
<pre>
BOOL \refrlarm{tnet_accept_host}        (U8 *rem_ip, U16 rem_port)
bool  \ref netTELNETs_AcceptClient (const NET_ADDR *addr)
</pre>
Identical functionality.

<hr>
<pre>
U8   \refrlarm{tnet_check_account} (U8 code, U8 *id)
\em removed
</pre>
Use \ref netTELNETs_CheckUsername and \ref netTELNETs_CheckPassword instead.

<hr>
<pre>
void *\refrlarm{tftp_fopen}     (      U8   *fname,       U8   *mode)
void * \ref netTFTPs_fopen (const char *fname, const char *mode)
</pre>
Identical functionality.

<hr>
<pre>
void \refrlarm{tftp_fclose}     (void *file)
void  \ref netTFTPs_fclose (void *file)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{tftp_fread}     (void *file, U8      *buf, U16      len)
uint32_t  \ref netTFTPs_fread (void *file, uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{tftp_fwrite}     (void *file,       U8      *buf, U16      len)
uint32_t  \ref netTFTPs_fwrite (void *file, const uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{tftp_accept_host}      (U8 *rem_ip, U16 rem_port)
bool  \ref netTFTPs_AcceptClient (const NET_ADDR *addr)
</pre>
Identical functionality.

<hr>
<pre>
void *\refrlarm{tftpc_fopen}    (      U8   *fname,       U8   *mode)
void * \ref netTFTPc_fopen (const char *fname, const char *mode)
</pre>
Identical functionality.

<hr>
<pre>
void \refrlarm{tftpc_fclose}    (void *file)
void  \ref netTFTPc_fclose (void *file)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{tftpc_fread}    (void *file, U8      *buf, U16      len)
uint32_t  \ref netTFTPc_fread (void *file, uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{tftpc_fwrite}    (void *file,       U8      *buf, U16      len)
uint32_t  \ref netTFTPc_fwrite (void *file, const uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
void *\refrlarm{ftp_fopen}     (      U8   *fname,       U8   *mode)
void * \ref netFTPs_fopen (const char *fname, const char *mode)
</pre>
Identical functionality.

<hr>
<pre>
void \refrlarm{ftp_fclose}     (void *file)
void  \ref netFTPs_fclose (void *file)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{ftp_fread}     (void *file, U8      *buf, U16      len)
uint32_t  \ref netFTPs_fread (void *file, uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{ftp_fwrite}     (void *file,       U8      *buf, U16      len)
uint32_t  \ref netFTPs_fwrite (void *file, const uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{ftp_fdelete}     (      U8   *fname)
bool  \ref netFTPs_fdelete (const char *fname)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{ftp_frename}     (      U8   *fname,       U8   *newn)
bool  \ref netFTPs_frename (const char *fname, const char *newname)
</pre>
Identical functionality.

<hr>
<pre>
U16     \refrlarm{ftp_ffind}     (    U8      code,  U8    *buf,   U8      *mask,   U16        len)
int32_t  \ref netFTPs_ffind (const char *mask, char *fname, uint32_t *fsize, NET_FS_TIME *ftime, bool first)
</pre>
- name changed, functions not compatible.
- removed parameters \a code, \a *buf and \a len.
- added parameters \a *fname, \a *fsize, \a *ftime and \a first.
- return code changed to return the status.

<hr>
<pre>
BOOL \refrlarm{ftp_accept_host}      (U8 *rem_ip, U16 rem_port)
bool  \ref netFTPs_AcceptClient (const NET_ADDR *addr)
</pre>
Changed IP address and port to \ref NET_ADDR.

<hr>
<pre>
U8   \refrlarm{ftp_check_account} (U8 code, U8 *id)
\em removed
</pre>
Use \ref netFTPs_CheckUsername and \ref netFTPs_CheckPassword instead.

<hr>
<pre>
U8      \refrlarm{ftp_get_user_id}   (void)
uint8_t  \ref netFTPs_GetUserId (void)
</pre>
Identical functionality.

<hr>
<pre>
BOOL \refrlarm{ftp_file_access}    (U8 *fname, U8 mode, U8 user_id)
bool  \ref netFTPs_FileAccess (uint8_t user_id, const char *fname, uint8_t access)
</pre>
Identical functionality.

<hr>
<pre>
void \refrlarm{ftp_evt_notify} (U8            evt)
void  \ref netFTPs_Notify (netFTPs_Event event)
</pre>
Changed event to \ref netFTPs_Event enum.

<hr>
<pre>
void *\refrlarm{ftpc_fopen}    (                         U8   *mode)
void * \ref netFTPc_fopen (const char *fname, const char *mode)
</pre>
- The argument \a fname specifies local file name.

<hr>
<pre>
void \refrlarm{ftpc_fclose}    (void *file)
void  \ref netFTPc_fclose (void *file)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{ftpc_fread}    (void *file, U8      *buf, U16      len)
uint32_t  \ref netFTPc_fread (void *file, uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{ftpc_fwrite}    (void *file,       U8      *buf, U16      len)
uint32_t  \ref netFTPc_fwrite (void *file, const uint8_t *buf, uint32_t len)
</pre>
Identical functionality.

<hr>
<pre>
U16      \refrlarm{ftpc_cbfunc}     (U8 code,                 U8   *buf, U16      buflen)
uint32_t  \ref netFTPc_Process (netFTPc_Request request, char *buf, uint32_t buf_len)
</pre>
Changed code/request to \ref netFTPc_Request.

<hr>
<pre>
U16      \refrlarm{smtp_cbfunc}      (U8 code,                  U8   *buf, U16      buflen,  U32      *pvar)
uint32_t  \ref netSMTPc_Process (netSMTPc_Request request, char *buf, uint32_t buf_len, uint32_t *pvar)
</pre>
Changed code/request to \ref netSMTPc_Request.

<hr>
<pre>
BOOL \refrlarm{smtp_accept_auth}              (U8 *srv_ip)
bool  \ref netSMTPc_AcceptAuthentication (const NET_ADDR *addr)
</pre>
Changed IP address to \ref NET_ADDR.


\section legacy2IPv6 Migrating from Network Component v5/v6

Previous versions of the MDK-Professional Middleware (Keil.MDK-Middleware.6.5.0 and below) did not support IPv6. This has
been added in the latest release. With this, a change in the namespace has taken place. Most functions are working
identically, but have been extended to support IPv6. This reference compares the API changes for every component
function-by-function. If you require a complete function reference for the old API, please install a previous version of the
Network Component.

The API functions along with the differences are shown in the order:
<hr>
\c Network \c Component \c v5/v6: IPv4-only support.\n
\c Network \c Component \c v7: IPv4/IPv6 support.\n

Description of the difference.
<hr>
\n
\n

\subsection mig_nw_core Network Core
<hr>
<pre>
netStatus net_initialize (void)
\ref netStatus \ref netInitialize  (void)
</pre>
- name changed, functions compatible
- \ref netInitialize creates netCore_Thread and RTOS protection objects (thread-safe).
- netCore_Thread runs in event-driven mode

<hr>
<pre>
int net_main (void)
\a removed
</pre>
- removed from Network-DS user API and moved to an internal netCore_Thread
- netInitialize creates netCore_Thread and RTOS protection objects (thread-safe).

<hr>
\n
\n


\subsection mig_udp_sockets UDP Sockets
<hr>
<pre>
int32_t udp_get_socket   (uint8_t tos, uint8_t opt, net_udp_cb_t cb_func)
int32_t \ref netUDP_GetSocket (                          netUDP_cb_t  cb_func)
</pre>
- name changed, functions not compatible
- replaced parameters with default values: \a tos, \a opt
- callback function changed to \ref netUDP_cb_t (different parameters)
- \b netUDP_GetSocket is thread-safe
 
Default values for removed parameters:
- \a tos = 0,
- \a opt = Calculate and verify checksum enabled.

Use \ref netUDP_SetOption function to change these values:

To change the \a tos value use:
\code
netUDP_SetOption (socket, netUDP_OptionTOS, tos);
\endcode

To disable the checksum calculation use:
\code
netUDP_SetOption (socket, netUDP_OptionChecksum, 0);
\endcode

<hr>
<pre>
uint32_t (*net_udp_cb_t)(int32_t socket, const uint8_t *ip_addr, uint16_t port, const uint8_t *buf, uint32_t len);
uint32_t (*netUDP_cb_t) (int32_t socket, const NET_ADDR   *addr,                const uint8_t *buf, uint32_t len);
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port replaced with structure \a *addr, where:
  \code
  ip_addr = addr->addr
  port    = addr->port
  \endcode

<hr>
<pre>
netStatus udp_release_socket   (int32_t socket)
\ref netStatus \ref netUDP_ReleaseSocket (int32_t socket)
</pre>
- name changed, functions compatible
- \b netUDP_ReleaseSocket is thread-safe

<hr>
<pre>
netStatus udp_open    (int32_t socket, uint16_t port)
\ref netStatus \ref netUDP_Open (int32_t socket, uint16_t port)
</pre>
- name changed, functions compatible
- \b netUDP_Open is thread-safe

<hr>
<pre>
netStatus udp_close    (int32_t socket)
\ref netStatus \ref netUDP_Close (int32_t socket)
</pre>
- name changed, functions compatible
- \b netUDP_Close is thread-safe

<hr>
<pre>
uint8_t *udp_get_buf      (uint32_t size)
uint8_t *\ref netUDP_GetBuffer (uint32_t size)
</pre>
- name changed, functions compatible
- \b netUDP_GetBuffer is thread-safe

<hr>
<pre>
netStatus udp_send    (int32_t socket, const uint8_t *ip_addr, uint16_t port, uint8_t *buf, uint32_t len)
\ref netStatus \ref netUDP_Send (int32_t socket, const NET_ADDR *addr,                  uint8_t *buf, uint32_t len)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port replaced with \a *addr structure
- \b netUDP_Send is thread-safe

To convert from old parameters to new NET_ADDR structure use the following code:
\code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  addr4.port      = port;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
\endcode

<hr>
<pre>
netStatus udp_multicast_ttl (int32_t socket, uint8_t ttl)
\a removed
</pre>
Use \ref netUDP_SetOption function to change ttl:
\code
netUDP_SetOption (socket, netUDP_OptionTTL, ttl);
\endcode

<hr>
\n
\n


\subsection mig_tcp_sockets TCP Sockets
<hr>
<pre>
int32_t tcp_get_socket   (uint8_t type, uint8_t tos, uint32_t tout, net_tcp_cb_t cb_func)
int32_t \ref netTCP_GetSocket (                                          netTCP_cb_t  cb_func)
</pre>
- name changed, functions not compatible
- replaced parameters with defaults: \a type, \a tos, \a tout
- callback function changed to \ref netTCP_cb_t (different parameters)
- \b netTCP_GetSocket is thread-safe

Default values for removed parameters:
- \a type = 0,
- \a tos  = 0,
- \a tout = default timeout specified in configuration Net_Config_TCP.h

Use \ref netTCP_SetOption function to change the defaults.

To enable \c TCP_TYPE_DELAY_ACK use:
\code
netTCP_SetOption (socket, netTCP_OptionDelayedACK, 1);
\endcode

To enable \c TCP_TYPE_KEEP_ALIVE use:
\code
netTCP_SetOption (socket, netTCP_OptionKeepAlive, 1);
\endcode

To enable \c TCP_TYPE_FLOW_CTRL use:
\code
netTCP_SetOption (socket, netTCP_OptionFlowControl, 1);
\endcode

<hr>
<pre>
uint32_t (*net_tcp_cb_t)(int32_t socket,     tcpEvent event,                       const uint8_t *buf, uint32_t len);
uint32_t (*netTCP_cb_t) (int32_t socket, netTCP_Event event, const NET_ADDR *addr, const uint8_t *buf, uint32_t len);
</pre>
- name changed, functions not compatible
- parameter \a tcpEvent changed to \a netTCP_Event, enumerations are compatible
- added parameter \a addr, which provides an IP address and port number of the remote peer
- parameter \a buf and \a len functionality changed to provide only the data \n
  In Network v5/v6 the meaning of parameters was defined with an event type:
  - \c tcpEventData: buf = pointer to data, len = length of the data 
  - other events: buf = IP address, len = port number.

<hr>
<pre>
netStatus tcp_release_socket   (int32_t socket)
\ref netStatus \ref netTCP_ReleaseSocket (int32_t socket)
</pre>
- name changed, functions compatible
- \b netTCP_ReleaseSocket is thread-safe

<hr>
<pre>
netStatus tcp_listen    (int32_t socket, uint16_t port)
\ref netStatus \ref netTCP_Listen (int32_t socket, uint16_t port)
</pre>
- name changed, functions compatible
- now implicitly starts a TCP socket in \b SERVER mode
- \b netTCP_Listen is thread-safe

<hr>
<pre>
netStatus tcp_connect    (int32_t socket, const uint8_t *ip_addr, uint16_t port, uint16_t local_port)
\ref netStatus \ref netTCP_Connect (int32_t socket, const NET_ADDR *addr,                  uint16_t local_port)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port need conversion to structure \a *addr
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  addr4.port      = port;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  \endcode
- now implicitly starts a TCP socket in \b CLIENT mode
- \b netTCP_Connect is thread-safe

<hr>
<pre>
uint8_t *tcp_get_buf      (uint32_t size)
uint8_t *\ref netTCP_GetBuffer (uint32_t size)
</pre>
- name changed, functions compatible
- \b netTCP_GetBuffer is thread-safe

<hr>
<pre>
uint32_t tcp_max_data_size        (int32_t socket)
uint32_t \ref netTCP_GetMaxSegmentSize (int32_t socket)
</pre>
- name changed, functions compatible
- \b netTCP_GetMaxSegmentSize is thread-safe

<hr>
<pre>
bool tcp_check_send   (int32_t socket)
bool \ref netTCP_SendReady (int32_t socket)
</pre>
- name changed, functions compatible
- \b netTCP_SendReady is thread-safe

<hr>
<pre>
tcpState     tcp_get_state   (int32_t socket)
\ref netTCP_State \ref netTCP_GetState (int32_t socket)
</pre>
- name changed, functions not compatible
- enumerator \ref netTCP_State has an additional state \c netTCP_StateINVALID, which was not existing before
- \b netTCP_GetState is thread-safe

<hr>
<pre>
const char *tcp_ntoa (tcpState state)
\a removed
</pre>

<hr>
<pre>
netStatus tcp_send    (int32_t socket, uint8_t *buf, uint32_t len)
\ref netStatus \ref netTCP_Send (int32_t socket, uint8_t *buf, uint32_t len)
</pre>
- name changed, functions compatible
- \b netTCP_Send is thread-safe

<hr>
<pre>
netStatus tcp_close    (int32_t socket)
\ref netStatus \ref netTCP_Close (int32_t socket)
</pre>
- name changed, functions compatible
- \b netTCP_Close is thread-safe

<hr>
<pre>
netStatus tcp_abort    (int32_t socket)
\ref netStatus \ref netTCP_Abort (int32_t socket)
</pre>
- name changed, functions compatible
- \b netTCP_Abort is thread-safe

<hr>
<pre>
netStatus tcp_reset_window          (int32_t socket)
\ref netStatus \ref netTCP_ResetReceiveWindow (int32_t socket)
</pre>
- name changed, functions compatible
- \b netTCP_ResetReceiveWindow is thread-safe

<hr>
\n
\n


\subsection mig_bsd_sockets BSD Sockets
The BSD Socket API is not changed and is backward compatible. It has been extended to support new IPv6 addresses without
breaking existing API.
\n
\n


\subsection mig_ftp_server FTP Server
<hr>
<pre>
bool ftp_accept_client    (const uint8_t *ip_addr, uint16_t port)
bool \ref netFTPs_AcceptClient (const NET_ADDR *addr)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port are replaced with structure \a *addr, where
  \code
  port    = addr->port
  ip_addr = addr->addr
  \endcode

<hr>
<pre>
uint8_t ftp_check_username    (const char *username)
uint8_t \ref netFTPs_CheckUsername (const char *username)
</pre>
- name changed, functions compatible

<hr>
<pre>
bool ftp_check_password    (uint8_t user_id, const char *password)
bool \ref netFTPs_CheckPassword (uint8_t user_id, const char *password)
</pre>
- name changed, functions compatible

<hr>
<pre>
bool ftp_file_access    (uint8_t user_id, const char *fname, uint8_t  mode)
bool \ref netFTPs_FileAccess (uint8_t user_id, const char *fname, uint32_t access)
</pre>
- name changed, functions not compatible
- parameter \a mode changed to \a access:
  | mode | access |
  |:----:|--------|
  | 0    | NET_ACCESS_FILE_READ
  | 1    | NET_ACCESS_FILE_WRITE
  | 2    | NET_ACCESS_DIRECTORY_CREATE and NET_ACCESS_DIRECTORY_REMOVE
  | 3    | NET_ACCESS_DIRECTORY_LIST
</table>

<hr>
<pre>
uint8_t ftp_get_user_id   (void)
uint8_t \ref netFTPs_GetUserId (void)
</pre>
- name changed, functions compatible

<hr>
<pre>
void ftp_server_notify (ftpServerEvent event)
void \ref netFTPs_Notify    (netFTPs_Event  event)
</pre>
- name changed, functions compatible
- enumerators \c ftpServerEvent and \c netFTPs_Event are compatible

<hr>
<pre>
void *ftp_server_fopen (const char *fname, const char *mode)
void *\ref netFTPs_fopen    (const char *fname, const char *mode)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
void ftp_server_fclose (void *file)
void \ref netFTPs_fclose    (void *file)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t ftp_server_fread (void *file, uint8_t *buf, uint32_t len)
uint32_t \ref netFTPs_fread    (void *file, uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t ftp_server_fwrite (void *file, const uint8_t *buf, uint32_t len)
uint32_t \ref netFTPs_fwrite    (void *file, const uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
bool ftp_server_fdelete (const char *fname)
bool \ref netFTPs_fdelete    (const char *fname)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
bool ftp_server_frename (const char *fname, const char *newname)
bool \ref netFTPs_frename    (const char *fname, const char *newname)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
bool ftp_server_mkdir (const char *path)
bool \ref netFTPs_mkdir    (const char *path)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
bool ftp_server_rmdir (const char *path)
bool \ref netFTPs_rmdir    (const char *path)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t ftp_server_ffind (uint8_t     code, char   *buf, uint32_t  buflen, const char  *mask)
int32_t  \ref netFTPs_ffind    (const char *mask, char *fname, uint32_t  *fsize, NET_FS_TIME *ftime, bool first)
</pre>
- name changed, functions not compatible.
- removed parameters \a code, \a *buf and \a len.
- added parameters \a *fname, \a *fsize, \a *ftime and \a first.
- return code changed to return the status.

<hr>
\n
\n


\subsection mig_ftp_client FTP Client
<hr>
<pre>
netStatus ftp_client_connect (const uint8_t *ip_addr, uint16_t port, ftpCommand     command)
\ref netStatus \ref netFTPc_Connect    (const NET_ADDR *addr,                  netFTP_Command command)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port need conversion to structure \a *addr \n
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  addr4.port      = port;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  \endcode
- enumerators \c ftpCommand and \c netFTP_Command are compatible  
- \b netFTPc_Connect is thread-safe

<hr>
<pre>
uint32_t ftp_client_request (ftpClientRequest request, char *buf, uint32_t len)
uint32_t \ref netFTPc_Process    (netFTPc_Request  request, char *buf, uint32_t buf_len)
</pre>
- name changed, functions not compatible
- enumerators \c ftpClientRequest and \c netFTPc_Request are not compatible:
  | ftpClientRequest    | netFTPc_Request |
  |---------------------|-----------------|
  | \c ftpClientUsername   | \c netFTPc_RequestUsername
  | \c ftpClientPassword   | \c netFTPc_RequestPassword
  | \c ftpClientPath       | \c netFTPc_RequestDirectory
  | \c ftpClientFilename   | \c netFTPc_RequestName
  | \c ftpClientDirectory  | \c netFTPc_RequestName
  | \c ftpClientNewName    | \c netFTPc_RequestNewName
  | \c ftpClientFilterMask | \c netFTPc_RequestListMask
  | \c ftpClientList       | \c netFTPc_RequestList
  | \c ftpClientLocalFile  | \c netFTPc_RequestLocalFilename
</table>

<hr>
<pre>
void ftp_client_notify (ftpClientEvent event)
void \ref netFTPc_Notify    (netFTPc_Event  event)
</pre>
- name changed, functions compatible
- enumerators \c ftpClientEvent and \c netFTPc_Event are compatible

<hr>
<pre>
void *ftp_client_fopen (const char *fname, const char *mode)
void *\ref netFTPc_fopen    (const char *fname, const char *mode)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
void ftp_client_fclose (void *file)
void \ref netFTPc_fclose    (void *file)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t ftp_client_fread (void *file, uint8_t *buf, uint32_t len)
uint32_t \ref netFTPc_fread    (void *file, uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t ftp_client_fwrite (void *file, const uint8_t *buf, uint32_t len)
uint32_t \ref netFTPc_fwrite    (void *file, const uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.
<hr>
\n
\n


\subsection mig_tftp_server TFTP Server
<hr>
<pre>
bool tftp_accept_client    (const uint8_t *ip_addr, uint16_t port)
bool \ref netTFTPs_AcceptClient (const NET_ADDR *addr)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port are replaced with structure \a *addr, where
  \code
  port    = addr->port
  ip_addr = addr->addr
  \endcode

<hr>
<pre>
void *tftp_server_fopen (const char *fname, const char *mode)
void *\ref netTFTPs_fopen    (const char *fname, const char *mode)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
void tftp_server_fclose (void *file)
void \ref netTFTPs_fclose    (void *file)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t tftp_server_fread (void *file, uint8_t *buf, uint32_t len)
uint32_t \ref netTFTPs_fread    (void *file, uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t tftp_server_fwrite (void *file, const uint8_t *buf, uint32_t len)
uint32_t \ref netTFTPs_fwrite    (void *file, const uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.
<hr>
\n
\n


\subsection mig_tftp_client TFTP Client
<hr>
<pre>
netStatus tftp_client_put (const uint8_t *ip_addr, uint16_t port, const char *src,   const char *dst)
\ref netStatus \ref netTFTPc_Put    (const NET_ADDR *addr,                  const char *fname, const char *local_fname)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port need conversion to structure \a *addr \n
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  addr4.port      = port;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  \endcode
- parameter \a *src renamed to \a *local_name
- parameter \a *dst renamed to \a *fname
- \b netTFTPc_Put is thread-safe

<hr>
<pre>
netStatus tftp_client_get (const uint8_t *ip_addr, uint16_t port, const char *src,   const char *dst)
\ref netStatus \ref netTFTPc_Get    (const NET_ADDR *addr,                  const char *fname, const char *local_fname)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port need conversion to structure \a *addr \n
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  addr4.port      = port;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  \endcode
- parameter \a *src renamed to \a *fname
- parameter \a *dst renamed to \a *local_name
- \b netTFTPc_Get is thread-safe

<hr>
<pre>
void tftp_client_notify (tftpClientEvent event)
void \ref netTFTPc_Notify    (netTFTPc_Event  event)
</pre>
- name changed, functions not compatible
- enumerators \c tftpClientEvent and \c netTFTPc_Event are not compatible:
  | tftpClientEvent | netTFTPc_Event |
  |-----------------|----------------|
  | \c tftpClientSuccess      | \c netTFTPc_EventSuccess
  | \c tftpClientTimeout      | \c netTFTPc_EventTimeout
  | \c tftpClientAccessDenied | \c netTFTPc_EventAccessDenied
  | \c tftpClientFileNotFound | \c netTFTPc_EventFileNotFound
  | \c tftpClientDiskFull     | \c netTFTPc_EventDiskFull
  | \c tftpClientDiskFull     | \c netTFTPc_EventLocalFileError
  | \c tftpClientError        | \c netTFTPc_EventError
</table>

<hr>
<pre>
void *tftp_client_fopen (const char *fname, const char *mode)
void *\ref netTFTPc_fopen    (const char *fname, const char *mode)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
void tftp_client_fclose (void *file)
void \ref netTFTPc_fclose    (void *file)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t tftp_client_fread (void *file, uint8_t *buf, uint32_t len)
uint32_t \ref netTFTPc_fread    (void *file, uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.

<hr>
<pre>
uint32_t tftp_client_fwrite (void *file, const uint8_t *buf, uint32_t len)
uint32_t \ref netTFTPc_fwrite    (void *file, const uint8_t *buf, uint32_t len)
</pre>
Changed function name to new naming convention.
<hr>
\n
\n


\subsection mig_telnet_server Telnet Server
<hr>
<pre>
netStatus telnet_server_set_delay  (uint32_t delay)
\ref netStatus \ref netTELNETs_RepeatCommand (uint32_t delay)
</pre>
- name changed, functions compatible

<hr>
<pre>
netStatus telnet_server_get_client (uint8_t *ip_addr, uint8_t *mac_addr)
\ref netStatus \ref netTELNETs_GetClient     (NET_ADDR *addr, uint32_t addr_len)
</pre>
- name changed, functions not compatible
- parameter \a *ip_addr replaced with structure \a *addr and \a addr_len
- parameter \a *mac_addr removed\n
  Use \ref netARP_GetMAC or \ref netNDP_GetMAC to retrieve MAC address from cache

<hr>
<pre>
int32_t telnet_server_get_session (void)
int32_t \ref netTELNETs_GetSession     (void)
</pre>
- name changed, functions compatible

<hr>
<pre>
bool telnet_check_command     (const char *cmd, const char *user_cmd)
bool \ref netTELNETs_CheckCommand  (const char *cmd, const char *user_cmd)
</pre>
- name changed, functions compatible

<hr>
<pre>
uint32_t telnet_server_message      (telnetServerMessage msg, char *buf, uint32_t len)
uint32_t \ref netTELNETs_ProcessMessage  (netTELNETs_Message  msg, char *buf, uint32_t buf_len)
</pre>
- name changed, functions compatible
- enumerators \c telnetServerMessage and \c netTELNETs_Message are compatible, but the sequence of definitions is reordered

<hr>
<pre>
uint32_t telnet_server_process     (const char *cmd, char *buf, uint32_t buflen,  uint32_t *pvar)
uint32_t \ref netTELNETs_ProcessCommand (const char *cmd, char *buf, uint32_t buf_len, uint32_t *pvar)
</pre>
- name changed, functions compatible

<hr>
<pre>
bool telnet_server_message_poll (int32_t session)
\a removed
</pre>
Use \ref netTELNETs_RequestMessage function for unsolicited messages instead.

Network v7 library does not poll for unsolicited messages anymore. When a request for unsolicited message is registered with
the \ref netTELNETs_RequestMessage function, the server requests the message content with the function
\ref netTELNETs_ProcessMessage.

<hr>
<pre>
bool telnet_accept_client    (const uint8_t *ip_addr, uint16_t port)
bool \ref netTELNETs_AcceptClient (const NET_ADDR *addr)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port are replaced with structure \a *addr, where
  \code
  port    = addr->port
  ip_addr = addr->addr
  \endcode

<hr>
<pre>
uint8_t telnet_check_username    (const char *username)
uint8_t \ref netTELNETs_CheckUsername (const char *username)
</pre>
- name changed, functions compatible

<hr>
<pre>
bool telnet_check_password    (uint8_t user_id, const char *password)
bool \ref netTELNETs_CheckPassword (uint8_t user_id, const char *password)
</pre>
- name changed, functions compatible

<hr>
<pre>
uint8_t telnet_get_user_id   (void)
uint8_t \ref netTELNETs_GetUserId (void)
</pre>
- name changed, functions compatible

<hr>
\n
\n


\subsection mig_http_server HTTP Server
<hr>
<pre>
const char *http_get_env_var (const char *env, char *ansi, uint32_t maxlen)
const char *\ref netCGI_GetEnvVar (const char *env, char *ansi, uint32_t max_len)
</pre>
- name changed, functions compatible

<hr>
<pre>
uint32_t http_utc_time (uint8_t hr, uint8_t min, uint8_t sec, uint8_t day, uint8_t mon, uint16_t year)
\a removed
</pre>


<hr>
<pre>
netStatus http_server_get_client (uint8_t *ip_addr, uint8_t *mac_addr)
\ref netStatus \ref netHTTPs_GetClient     (NET_ADDR *addr, uint32_t addr_len)
</pre>
- name changed, functions not compatible
- parameter \a *ip_addr replaced with structure \a *addr and \a addr_len
- parameter \a *mac_addr removed \n
  Use \ref netARP_GetMAC or \ref netNDP_GetMAC to retrieve MAC address from cache

<hr>
<pre>
int32_t http_server_get_session (void)
int32_t \ref netHTTPs_GetSession     (void)
</pre>
- name changed, functions compatible

<hr>
<pre>
const char *http_server_get_lang (void)
const char *\ref netHTTPs_GetLanguage (void)
</pre>
- name changed, functions compatible

<hr>
<pre>
const char *http_server_get_content_type (void)
const char *\ref netHTTPs_GetContentType      (void)
</pre>
Changed function name to new naming convention.
- name changed, functions compatible

<hr>
<pre>
void cgi_process_query   (const char *qstr)
void \ref netCGI_ProcessQuery (const char *qstr)
</pre>
- name changed, functions compatible

<hr>
<pre>
void cgi_process_data   (uint8_t code, const char *data, uint32_t len)
void \ref netCGI_ProcessData (uint8_t code, const char *data, uint32_t len)
</pre>
- name changed, functions compatible

<hr>
<pre>
uint32_t cgi_script    (const char *env, char *buf, uint32_t buflen,  uint32_t *pcgi)
uint32_t \ref netCGI_Script (const char *env, char *buf, uint32_t buf_len, uint32_t *pcgi)
</pre>
- name changed, functions compatible

<hr>
<pre>
const char *cgi_content_type   (const char *file_ext)
const char *\ref netCGI_ContentType (const char *file_ext)
</pre>
- name changed, functions compatible

<hr>
<pre>
const char *cgx_content_type   (void)
const char *\ref netCGX_ContentType (void)
</pre>
- name changed, functions compatible

<hr>
<pre>
const char *http_encoding  (void)
const char *\ref netCGI_Charset (void)
</pre>
- name changed, functions compatible

<hr>
<pre>
bool http_accept_client    (const uint8_t *ip_addr, uint16_t port)
bool \ref netHTTPs_AcceptClient (const NET_ADDR *addr)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port are replaced with structure \a *addr, where
  \code
  port    = addr->port
  ip_addr = addr->addr
  \endcode

<hr>
<pre>
uint8_t http_check_account    (const char *username, const char *password)
uint8_t \ref netHTTPs_CheckAccount (const char *username, const char *password)
</pre>
- name changed, functions compatible

<hr>
<pre>
bool http_file_access    (uint8_t user_id, const char *fname)
bool \ref netHTTPs_FileAccess (uint8_t user_id, const char *fname)
</pre>
- name changed, functions compatible

<hr>
<pre>
uint8_t http_get_user_id   (void)
uint8_t \ref netHTTPs_GetUserId (void)
</pre>
- name changed, functions compatible

<hr>
<pre>
void *http_server_fopen (const char *fname)
void *\ref netHTTPs_fopen    (const char *fname)
</pre>
- name changed, functions compatible

<hr>
<pre>
void http_server_fclose (void *file)
void \ref netHTTPs_fclose    (void *file)
</pre>
- name changed, functions compatible

<hr>
<pre>
uint32_t http_server_fread (void *file, uint8_t *buf, uint32_t len)
uint32_t \ref netHTTPs_fread    (void *file, uint8_t *buf, uint32_t len)
</pre>
- name changed, functions compatible

<hr>
<pre>
char *http_server_fgets (void *file, char *buf, uint32_t size)
char *\ref netHTTPs_fgets    (void *file, char *buf, uint32_t size)
</pre>
- name changed, functions compatible

<hr>
<pre>
uint32_t http_server_ftime (const char *fname)
\a removed
</pre>
Use \ref netHTTPs_fstat instead.

<hr>
\n
\n


\subsection mig_smtp_client SMTP Client
<hr>
<pre>
netStatus smtp_client_connect (const uint8_t *ip_addr, uint16_t port)
\ref netStatus \ref netSMTPc_Connect    (const NET_ADDR *addr)
</pre>
- name changed, functions not compatible
- parameters \a *ip_addr and \a port need conversion to structure \a *addr \n
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  addr4.port      = port;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  \endcode
- \b netSMTPc_Connect is thread-safe

<hr>
<pre>
uint32_t smtp_client_request (smtpClientRequest request, char *buf, uint32_t buflen,  uint32_t *pvar)
uint32_t \ref netSMTPc_Process    (netSMTPc_Request  request, char *buf, uint32_t buf_len, uint32_t *pvar)
</pre>
- name changed, functions not compatible
- enumerators \c smtpClientRequest and \c netSMTPc_Request are compatible.

<hr>
<pre>
void smtp_client_notify (smtpClientEvent event)
void \ref netSMTPc_Notify    (netSMTPc_Event  event)
</pre>
- name changed, functions compatible
- enumerators \c smtpClientEvent and \c netSMTPc_Event are compatible

<hr>
<pre>
bool smtp_client_accept_authentication (const uint8_t *ip_addr)
bool \ref netSMTPc_AcceptAuthentication     (const NET_ADDR *addr)
</pre>
- name changed, functions not compatible
- parameter \a *ip_addr replaced with structure \a *addr, where:
  \code
  ip_addr = addr->addr
  \endcode

<hr>
\n
\n


\subsection mig_sntp_client SNTP Client
<hr>
<pre>
netStatus sntp_get_time    (const uint8_t *ip_addr, net_sntp_client_cb_t cb_func)
\ref netStatus \ref netSNTPc_GetTime (const NET_ADDR *addr,   netSNTPc_cb_t        cb_func)
</pre>
- name changed, functions not compatible
- parameter \a *ip_addr changed to structure \a *addr \n
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  \endcode
- callback function changed to \ref netSNTPc_cb_t 
- \b netSNTPc_GetTime is thread-safe

<hr>
<pre>
void (*net_sntp_client_cb_t)(uint32_t utc_time);
void (*netSNTPc_cb_t)       (uint32_t seconds, uint32_t seconds_fraction);
</pre>
- name changed, functions not compatible
- parameter \a utc_time renamed to \a seconds
- parameter \a seconds_fraction added

<hr>
\n
\n


\subsection mig_snmp_agent SNMP Agent
<hr>
<pre>
netStatus snmp_trap    (const uint8_t *ip_addr, uint8_t generic, uint8_t specific, const uint16_t *obj_list)
\ref netStatus \ref netSNMP_Trap (const NET_ADDR *addr,   uint8_t generic, uint8_t specific, const uint16_t *obj_list)
</pre>
- name changed, functions not compatible
- parameter \a *ip_addr changed to structure \a *addr \n
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  \endcode
- \b netSNMP_Trap is thread-safe

<hr>
<pre>
netStatus snmp_set_community   (const char *community)
\ref netStatus \ref netSNMP_SetCommunity (const char *community)
</pre>
- name changed, functions compatible
- \b netSNMP_SetCommunity is thread-safe

<hr>
\n
\n


\subsection mig_interfaces Network Interfaces
<hr>
<pre>
netStatus arp_cache_ip   (uint32_t if_num, const uint8_t *ip_addr,  arpCacheType type)
\ref netStatus \ref netARP_CacheIP (uint32_t if_num, const uint8_t *ip4_addr, netARP_CacheType type)
</pre>
- name changed, functions compatible
- enumerators \c arpCacheType and \c netARP_CacheType are compatible
- \b netARP_CacheIP is thread-safe

<hr>
<pre>
netStatus arp_cache_mac   (uint32_t if_num, const uint8_t *mac_addr)
\ref netStatus \ref netARP_CacheMAC (uint32_t if_num, const uint8_t *mac_addr)
</pre>
- name changed, functions compatible
- \b netARP_CacheMAC is thread-safe

<hr>
<pre>
netStatus arp_get_ip   (                 const uint8_t *mac_addr, uint8_t *ip_addr)
\ref netStatus \ref netARP_GetIP (uint32_t if_num, const uint8_t *mac_addr, uint8_t *ip4_addr)
</pre>
- name changed, functions not compatible
- parameter \a if_num added \n
  Use \c if_num=0 when replacing \b arp_get_ip
- \b netARP_GetIP is thread-safe

<hr>
<pre>
netStatus arp_get_mac   (                 const uint8_t *ip_addr,  uint8_t *mac_addr)
\ref netStatus \ref netARP_GetMAC (uint32_t if_num, const uint8_t *ip4_addr, uint8_t *mac_addr)
</pre>
- name changed, functions not compatible
- parameter \a if_num added \n
  Use \c if_num=0 when replacing \b arp_get_mac
- \b netARP_GetMAC is thread-safe

<hr>
<pre>
netStatus dhcp_disable    (uint32_t if_num)
\ref netStatus \ref netDHCP_Disable (uint32_t if_num)
</pre>
- name changed, functions compatible
- \b netDHCP_Disable is thread-safe

<hr>
<pre>
netStatus igmp_join    (uint32_t if_num, const uint8_t *ip_addr)
\ref netStatus \ref netIGMP_Join (uint32_t if_num, const uint8_t *ip4_addr)
</pre>
- name changed, functions compatible
- \b netIGMP_Join is thread-safe

<hr>
<pre>
netStatus igmp_leave    (uint32_t if_num, const uint8_t *ip_addr)
\ref netStatus \ref netIGMP_Leave (uint32_t if_num, const uint8_t *ip4_addr)
</pre>
- name changed, functions compatible
- \b netIGMP_Leave is thread-safe

<hr>
<pre>
void eth_link_notify (uint32_t if_num, ethLinkEvent event)
void \ref netETH_Notify   (uint32_t if_num, netETH_Event event, uint32_t val)
</pre>
- name changed, functions not compatible
- parameter \a val added
- enumerators \c ethLinkEvent and \c netETH_Event are not compatible:
  - events \c ethLinkDown and \c netETH_LinkDown are equal
  - multiple events \c ethLinkUp_xxxx are replaced by a single \c event netETH_LinkUp, where additional parameter \a val
    provides more information about the link

<hr>
<pre>
void dhcp_client_notify (uint32_t if_num, dhcpClientOption opt, const uint8_t *val, uint32_t len)
void \ref netDHCP_Notify     (uint32_t if_num,       uint8_t option, const uint8_t *val, uint32_t len)
</pre>
- name changed, functions not compatible
- parameter \a opt changed to \a option:
  | opt | option |
  |-----|--------|
  | \c dhcpClientIPaddress    | \c \#define \c NET_DHCP_OPTION_IP_ADDRESS 
  | \c dhcpClientNTPservers   | \c \#define \c NET_DHCP_OPTION_NTP_SERVERS 
  | \c dhcpClientBootfileName | \c \#define \c NET_DHCP_OPTION_BOOTFILE_NAME 
</table>

<hr>
<pre>
netStatus ppp_listen     (const char *username, const char *password)
\ref netStatus \ref netPPP_Listen  (const char *username, const char *password)
</pre>
- name changed, functions compatible
- \b netPPP_Listen is thread-safe

<hr>
<pre>
netStatus ppp_connect    (const char *dial_num, const char *username, const char *password)
\ref netStatus \ref netPPP_Connect (const char *dial_num, const char *username, const char *password)
</pre>
- name changed, functions compatible
- \b netPPP_Connect is thread-safe

<hr>
<pre>
netStatus ppp_close    (void)
\ref netStatus \ref netPPP_Close (void)
</pre>
- name changed, functions compatible
- \b netPPP_Close is thread-safe

<hr>
<pre>
bool ppp_is_up     (void)
bool \ref netPPP_LinkUp (void)
</pre>
- name changed, functions compatible
- \b netPPP_LinkUp is thread-safe

<hr>
<pre>
netStatus slip_listen    (void)
\ref netStatus \ref netSLIP_Listen (void)
</pre>
- name changed, functions compatible
- \b netSLIP_Listen is thread-safe

<hr>
<pre>
netStatus slip_connect    (const char *dial_num)
\ref netStatus \ref netSLIP_Connect (const char *dial_num)
</pre>
- name changed, functions compatible
- \b netSLIP_Connect is thread-safe

<hr>
<pre>
netStatus slip_close    (void)
\ref netStatus \ref netSLIP_Close (void)
</pre>
- name changed, functions compatible
- \b netSLIP_Close is thread-safe

<hr>
<pre>
bool slip_is_up     (void)
bool \ref netSLIP_LinkUp (void)
</pre>
- name changed, functions compatible
- \b netSLIP_LinkUp is thread-safe

<hr>
<pre>
netStatus icmp_ping    (const uint8_t *ip_addr, net_icmp_cb_t cb_func)
\ref netStatus \ref netPing_Echo (const NET_ADDR *addr,   netPing_cb_t  cb_func)
</pre>
- name changed, functions not compatible
- parameter \a *ip_addr changed to structure \a *addr \n
  Use the following code for the conversion:
  \code
  NET_ADDR4 addr4;
  addr4.addr_type = NET_ADDR_IP4;
  memcpy (addr4.addr, ip_addr, NET_ADDR_IP4_LEN);
  // addr4.port - don't care
  \endcode
- callback function changed to \ref netPing_cb_t 
- \b netPing_Echo is thread-safe

<hr>
<pre>
void (*net_icmp_cb_t)(icmpEvent     event);
void (*netPing_cb_t) (netPing_Event event);
</pre>
- name changed, functions compatible
- enumerators \c icmpEvent and \c netPing_Event are compatible

<hr>
<pre>
netStatus get_host_by_name      (const char *name,                    net_dns_client_cb_t cb_func)
\ref netStatus \ref netDNSc_GetHostByName (const char *name, int16_t addr_type, netDNSc_cb_t        cb_func)
</pre>
- name changed, functions not compatible
- added parameter \c addr_type
- callback function changed to \ref netDNSc_cb_t 
- \b netDNSc_GetHostByName is thread-safe

<hr>
<pre>
void (*net_dns_client_cb_t)(dnsClientEvent event, const uint8_t *ip_addr);
void (*netDNSc_cb_t)       (netDNSc_Event  event, const NET_ADDR   *addr);
</pre>
- name changed, functions not compatible
- enumerators \c dnsClientEvent and \c netDNSc_Event are compatible
- parameter \a *ip_addr replaced with structure \a *addr, where:
  \code
  ip_addr = addr->addr
  \endcode

<hr>
\n
\n


\subsection mig_nw_addr_conversion Network Address Conversion
<hr>
<pre>
const char *ip4_ntoa   (                    const uint8_t *ip4_addr)
const char *\ref netIP_ntoa (int16_t addr_type,  const uint8_t *ip_addr, char *string_buf, uint32_t buf_len)
</pre>
- name changed, functions not compatible
- parameters \a addr_type, \a *string_buf and \a buf_len added. \n
  Use the following code for the conversion:
  \code
  char ip_ascii[16];
  netIP_ntoa (NET_ADDR_IP4, ip4_addr, ip_ascii, sizeof(ip_ascii));
  \endcode
- \b netIP_ntoa is thread-safe

<hr>
<pre>
bool ip4_aton   (const char *cp,                             uint8_t *ip4_addr)
bool \ref netIP_aton (const char *addr_string, int16_t addr_type, uint8_t *ip_addr)
</pre>
- name changed, functions not compatible
- parameter \a *cp renamed to \a *addr_string
- parameters \a addr_type and \a *ip_addr added \n
  Use the following code for the conversion:
  \code
  netIP_aton (cp, NET_ADDR_IP4, ip4_addr);
  \endcode
- \b netIP_aton is thread-safe

<hr>
<pre>
const char *mac_ntoa    (const uint8_t *mac_addr)
const char *\ref netMAC_ntoa (const uint8_t *mac_addr, char *string_buf, uint32_t buf_len)
</pre>
- name changed, functions not compatible
- parameters \a addr_type, \a *string_buf and \a buf_len added \n
  Use the following code for the conversion:
  \code
  char mac_ascii[20];
  netMAC_ntoa (mac_addr, mac_ascii, sizeof(mac_ascii));
  \endcode
- \b netMAC_ntoa is thread-safe

<hr>
<pre>
bool mac_aton    (const char *cp,         uint8_t *mac_addr)
bool \ref netMAC_aton (const char *mac_string, uint8_t *mac_addr)
</pre>
- name changed, functions compatible
- parameter \a *cp renamed to \a *mac_string
- \b netMAC_aton is thread-safe

<hr>

\subsection mig_nw_definitions Network Definitions
Network definitions have been changed. Refer to this table:

|Network Component v5/v6 | Network Component v7
|------------------------|---------------------|
|IP4_ADDR_LEN            |NET_ADDR_IP4_LEN     |
|ETH_ADDR_LEN            |NET_ADDR_ETH_LEN     |
*/