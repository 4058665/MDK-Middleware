/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page mw_using_generic_steps Generic Steps
There are a few generic steps that have to be done to include a middleware component in a µVision project:

\image html "generic_steps.png" "Generic steps for adding Middleware to a µVision project"


\section add_sw_comp Add Software Components
Using the <b>Manage Run-Time Environment</b> window, you need to select the required software components for your
application. The <b>Validation Output</b> helps you to identify dependencies to other software components and resolves them
automatically, whenever possible.

\image html "manage_rte_window.png" "Manage Run-Time Environment Window with Validation Errors"


\section conf_mw Configure Middleware
Every middleware component has specific configuration files that need to be adapted to the needs of the application.
Depending on the component, more than one file might need to be adapted. For example, the <b>File System</b> component needs
to be configured for the amount of files that can be opened simultaneously and the initial current drive in the \b FS_Config.c file.
In addition, you need to set drive specific settings in the <b>FS_Config_<i>Drive</i>_0.h</b> file, such as page and block sizes
for Flash memories, general disk sizes for a RAM drive, and the hardware driver number for connecting the drive to the appropriate
hardware peripheral driver.

\image html "file_system_conf.png" "File System Configuration Files FS_Config_MC_0.h and FS_Config.c"


\section conf_drivers Configure Drivers
Usually, the device driver related to a software component and the associated controller in the microcontroller need to be
configured as well. For the middleware, this is usually done in the file \b RTE_Device.h. Here, you can enable or disable
the different hardware controllers and you can specify which device pins are used for the different features of a specific
device peripheral.

\image html "rte_device_h.png" "RTE_Device.h File for Driver Configuration"


\section conf_sys_req Configure System Resources
Every software component has resource requirements for stack, heap, and memory. Configuration files such as
<b>startup_<i>device</i>.s</b> and \urlout{RTX-Conf-CM5} file need to be adapted to these requirements. Every middleware component has
a section that explains the resource requirements and gives examples on how to calculate the resulting values for adaption
of the configuration files. The section \ref mw_using_stack_and_heap gives you more information about the background and
the configuration files that need to be touched.

\image html "rtx_startup.png" "RTX_Config.h and startup_device.s for System Resource Configuration"


\section implement_feat Implement Application Features
Finally, the actual application needs to be implemented. For better understanding of the middleware components, take a look
at the existing \ref doc_mw "Example projects". They can be used as a starting point for application development. The
\ref doc_mw "Reference" sections of each middleware component help to understand the API functions for the related
components. Various \urlout{uv4_ca_sourcefiles} are available to help you implementing your application.
*/

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page mw_using_stack_and_heap Stack, Heap and RTOS Configuration
Every software component has resource requirements for stack, heap, and memory. Configuration files such as
\ref mw_using_startup "startup_device.s" and \ref mw_using_rtx_conf "RTX_Config.h" need to be adapted to these requirements.
Every middleware component has a section that explains the resource requirements and gives examples on how to calculate the
resulting values for adaption of the configuration files.


\section mw_using_startup Configuring Stack using startup_device.s
The \b startup_device.s file is provided by the device vendor in a
<a class=el href="https://open-cmsis-pack.github.io/Open-CMSIS-Pack-Spec/main/html/index.html" target="_blank">Device Family Pack</a>.
The file will be copied into a
µVision project automatically after selecting <b>Device:Startup</b> in the <b>Manage Run-Time Environment</b> window. It
is used to configure the size of the stack that is used by exceptions and <b>interrupt service routines (ISR)</b> for
the current project. The stack size requirements depend on the maximum nesting of exception and ISR execution and therefore
on the priority settings of the various interrupt and exception sources. Also, the heap which is used by memory allocation
functions is configured in this file.

Most of the middleware components only require additional \b stack size, whereas the <b>File System</b> component also
requires additional \b heap size. The memory requirements are stated in the \ref mw_using_mw "Resource Requirements" section
of each middleware component.


\section mw_using_rtx_conf Configuring CMSIS-RTOS2 using RTX_Config.h
The stack size in the \b startup_device.s file configures only the stack space that is used by exceptions and
<b>interrupt service routines (ISR)</b>. When using a CMSIS-RTOS2, additional requirements for the RTOS are configured in the
\urlout{RTX-Conf-CM5} file. In general middleware components use statically allocated resources when RTX v5 is used and in that case 
no change to RTX configuration file is necessary, for details consult Resource Requirements section of related component.

The additional CMSIS-RTOS related requirements are also stated in the \ref mw_using_mw "Resource Requirements" section
of each middleware component.
*/
