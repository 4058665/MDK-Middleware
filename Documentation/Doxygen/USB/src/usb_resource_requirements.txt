/**
\page usb_resource_requirements Resource Requirements

This section describes the resource requirements of the USB component. 

\section usbd_res_req USB Device Resource Requirements

The following section documents the requirements for the <b>USB Device</b> component. The actual requirements depend on the
components used in the application and the configuration of these components.


\subsection usbd_stack_req Stack Requirements

The USB Device Core receives events sent from the interrupt service routine (ISR) of the <b>USB Device Driver</b>. 
The stack requirements for the ISR are typically less than 512 Bytes. The total stack space required for ISR depends
on the interrupt nesting and therefore on the priority settings of these ISR.

| Option (under section Stack Configuration)                        | Increase Value by
| :---------------------------------------------------------------- | :----------------------
| Stack Size (in Bytes)                                             | + 512 for USB Device Driver

\note
The stack size requirements depend on the maximum nesting of exception and ISR execution and therefore on the priority settings 
of the various interrupt and exception sources.

User code that calls API functions of the USB Device Component should have a minimum of 512 Bytes of stack space available.
Since API functions are frequently called from threads, the thread stack size should be at least 512 Bytes (see below).


\subsection usbd_rtos_req CMSIS-RTOS2 Requirements

Currently, the USB Device component works in two different RTOS configurations:
-# <b>CMSIS-RTOS2 RTX5</b>: This mode uses Keil RTX5 natively. In the Manage Run-Time Environment window, the component
   <b>CMSIS:RTOS2 (API):Keil RTX5</b> must be selected. The RTOS resources are static, configured by the system. There is
   <b>no need for additional user configuration</b>. This is the suggested option for new development.
-# <b>CMSIS-RTOS2 with a generic RTOS</b>: this mode uses a generic RTOS (such as FreeRTOS). The RTOS
   resources (thread, mutex and semaphore control blocks and thread stacks) are dynamically allocated. The user needs to
   provide memory pools big enough for the allocations in the specific RTOS configuration.

The USB Device component uses threads. Each instance of a component starts its own threads, for example two HID
instances start two threads with the name: <i>USBD_HID0_Thread</i>, <i>USBD_HID1_Thread</i>. The thread execution starts with
\ref USBD_Initialize.

The following table lists the components, number of threads, thread name, default thread priority, default stack size
and the configuration file with <b>OS Resource Settings</b> for stack size adjustments.

| Component                         | Number of Threads | Thread Name                                               | Default Priority         | Default Stack Size | Configuration File
| :---------------------------------| :-----------------| :---------------------------------------------------------| :----------------------: | :----------------: | :------------------------
| <b>\::USB:Device</b>              | 1                 | USBD<i>n</i>_Core_Thread                                  | \c osPriorityAboveNormal | 1024 Bytes         | USBD_Config_<i>n</i>.h
| <b>\::USB:Device:ADC</b>          | 1                 | USBD_ADC<i>n</i>_Thread                                   | \c osPriorityAboveNormal | 512 Bytes          | USBD_Config_ADC_<i>n</i>.h
| <b>\::USB:Device:CDC</b>          | 2                 | USBD_CDC<i>n</i>_Bulk_Thread, USBD_CDC<i>n</i>_Int_Thread | \c osPriorityAboveNormal | 512 Bytes          | USBD_Config_CDC_<i>n</i>.h
| <b>\::USB:Device:Custom Class</b> | 1...15            | USBD_CustomClass<i>n</i>_EP<i>m</i>_Thread                | \c osPriorityAboveNormal | 512 Bytes          | USBD_Config_CustomClass_<i>n</i>.h
| <b>\::USB:Device:HID</b>          | 1                 | USBD_HID<i>n</i>_Thread                                   | \c osPriorityAboveNormal | 512 Bytes          | USBD_Config_HID_<i>n</i>.h
| <b>\::USB:Device:MSC</b>          | 1                 | USBD_MSC<i>n</i>_Thread                                   | \c osPriorityAboveNormal | 512 Bytes          | USBD_Config_MSC_<i>n</i>.h
<i>n</i> is instance number, <i>m</i> is Endpoint number 1...15

\note
- For <b>\::USB:Device:Custom Class</b> each endpoint In/Out pair executes in a separate thread. The number of threads depends on
  the number of endpoints enabled in the configuration file USBD_Config_CustomClass_<i>n</i>.c.
- The <b>Default Stack Size</b> in the table above can be changed in the USB configuration files (for example
  USBD_Config_<i>n</i>.h and USBD_Config_<i>DeviceClass_n</i>.h). At the end of each configuration file, you will find
  <b>OS Resource Settings</b> and below that the value for the <b>Thread stack size</b>. 

\subsection usbd_req_rtx5 RTX v5 Requirements

The USB Device component allocates all necessary resources statically so no changes to RTX settings are necessary.

\subsection usbd_mem_req Memory Requirements

The following table shows the memory requirements for read-only (Flash) and read-write (RAM) memory.
These numbers may be used to estimate the total size requirements of the application, but the actual numbers depend
on compiler optimizations and target processor and may be therefore slightly different.

| Component                         | RO Memory [Bytes] | RW Memory (Data) [Bytes]                                                                                 |
| :-------------------------------- | :---------------: | :--------------------------------------------------------------------------------------------------------|
| <b>\::USB:Core</b> (Device)       |      6.0 k        | < 470                                                                                                    |
| <b>\::USB:Device:ADC</b>          |      2.5 k        | < 110 + <i>Audio Subframe Sizes</i> * <i>Buffer Sizes</i> (configured in the USBD_Config_ADC_<i>n</i>.h) |
| <b>\::USB:Device:HID</b>          |      2.7 k        | < 130 + <i>Maximum Report Sizes</i>                       (configured in the USBD_Config_HID_<i>n</i>.h) |
| <b>\::USB:Device:MSC</b>          |      4.1 k        | < 160 + <i>Maximum Bulk Buffer Size</i>                   (configured in the USBD_Config_MSC_<i>n</i>.h) |
| <b>\::USB:Device:CDC ACM</b>      |      3.2 k        | < 220 + <i>Maximum Send/Receive Buffer Sizes</i>          (configured in the USBD_Config_CDC_<i>n</i>.h) |
| <b>\::USB:Device:Custom Class</b> |      2.0 k        | < 80                                                                                  |
| <b>USB Device Driver</b>          |     1 .. 4 k      | 0.5 .. 4 k                                                                            |


\section usbh_res_req USB Host Resource Requirements

The following section documents the requirements for the <b>USB Host</b> component. The actual requirements depend on the
components used in the application and the configuration of these components.


\subsection usbh_stack_req Stack Requirements

The USB Host Core receives events sent from the interrupt service routine (ISR) of the USB Host Driver. 
The stack requirements for the ISR are typically less than 512 Bytes. The total stack space required for ISR depends
on the interrupt nesting and therefore on the priority settings of these ISR.

| Option (under section Stack Configuration)                        | Increase Value by
| :---------------------------------------------------------------- | :----------------------
| Stack Size (in Bytes)                                             | + 512 for USB Host Driver

\note
The stack size requirements depend on the maximum nesting of exception and ISR execution and therefore on the priority settings 
of the various interrupt and exception sources.

User code that calls API functions of the USB Host Component should have a minimum of 512 Bytes of stack space available.
Since API functions are frequently called from threads, the thread stack size should be at least 512 Bytes.

\subsection usbh_rtos_req CMSIS-RTOS2 Requirements

Currently, the USB Host component works in two different RTOS configurations:
-# <b>CMSIS-RTOS2 RTX5</b>: This mode uses Keil RTX5 natively. In the Manage Run-Time Environment window, the component
   <b>CMSIS:RTOS2 (API):Keil RTX5</b> must be selected. The RTOS resources are static, configured by the system. There is
   <b>no need for additional user configuration</b>. This is the suggested option for new development.
-# <b>CMSIS-RTOS2 with a generic RTOS</b>: this mode uses a generic RTOS (such as FreeRTOS). The RTOS
   resources (thread, mutex and semaphore control blocks and thread stacks) are dynamically allocated. The user needs to
   provide memory pools big enough for the allocations in the specific RTOS configuration.

The USB Host component uses threads. Each USB Host instance starts its own thread (USBH<i>n</i>_Core_Thread).
The thread execution starts with \ref USBH_Initialize. Additionally each instance of HID and CDC class also start their own 
thread (USBH_HIDn_IntIn_Thread or USBH_CDCn_IntIn_Thread) when HID or CDC device is connected.

The following table lists the components, number of threads, thread name, default thread priority, default stack size
and the configuration file with <b>OS Resource Settings</b> for stack size adjustments.

| Component                         | Number of Threads | Thread Name                   | Default Priority         | Default Stack Size | Configuration File
| :---------------------------------| :-----------------| :-----------------------------| :----------------------: | :----------------: | :------------------------
| <b>\::USB:Host</b>                | 1                 | USBH<i>n</i>_Core_Thread      | \c osPriorityAboveNormal | 2048 Bytes         | USBH_Config_<i>n</i>.h
| <b>\::USB:Host:CDC</b>            | 1                 | USBH_CDC<i>n</i>_IntIn_Thread | \c osPriorityAboveNormal |  512 Bytes         | USBH_Config_CDC.h
| <b>\::USB:Host:HID</b>            | 1                 | USBH_HID<i>n</i>_IntIn_Thread | \c osPriorityAboveNormal |  512 Bytes         | USBH_Config_HID.h
<i>n</i> is instance number

\note
- The <b>Default Stack Size</b> in the table above can be changed in the USB configuration files (for example
  USBH_Config_<i>n</i>.h and USBH_Config_<i>DeviceClass</i>.h). At the end of each configuration file, you will find
  <b>OS Resource Settings</b> and below that the value for the <b>Thread stack size</b>.
- If File System is used retargeted to USB Host Mass Storage the stack size for thread calling File System functions should 
  be at least 2560 Bytes.

\subsection usbh_req_rtx5 RTX v5 Requirements

The USB Host component allocates all necessary resources statically so no changes to RTX settings are necessary.

\subsection usbh_mem_req Memory Requirements

The following table shows the memory requirements for read-only (Flash) and read-write (RAM) memory.
These numbers may be used to estimate the total size requirements of the application, but the actual numbers depend
on compiler optimizations and target processor and may be therefore slightly different.

| Component                         | RO Memory [Bytes] | RW Memory (Data) [Bytes] 
| :-------------------------------- | :---------------: | :-----------------------:
| <b>\::USB:Core</b> (Host)         |     < 9.5 k       | < 370 + <i>Memory Pool Size</i> (configured in the USBH_Config_<i>n</i>.h)
| <b>\::USB:Host:HID</b>            |     < 1.3 k       | < 70
| <b>\::USB:Host:MSC</b>            |     < 3.4 k       | < 40
| <b>\::USB:Host:CDC</b>            |     < 1.0 k       | < 30
| <b>USB Host OHCI</b> support      |     < 3.5 k       | < 0.5 k
| <b>USB Host EHCI</b> support      |     < 5.0 k       | < 4.5 k
*/