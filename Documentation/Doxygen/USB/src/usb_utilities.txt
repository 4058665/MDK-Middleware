
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page usb_sw_utilities USB Host Computer Applications

Most of the available USB Device Classes are directly supported in operating systems. There is no need to install a particular
driver on the USB Host Computer to connect to the USB Device peripheral. 

Some software needs to be written for the USB Host Computer when USB Driver classes are used to provide application specific
functionality. For example, the USB HID Device Class may be used for generic data exchange. Therefore the data exchange
interface needs to be developed at the USB Host Computer.

Refer to the following web pages for more information on USB Host software development: 
 - <a class="el" href="https://learn.microsoft.com/en-us/windows-hardware/drivers/" target="_blank">USB Serial Bus (USB)</a> for Microsoft Windows.
 - <a class="el" href="http://www.linux-usb.org/" target="_blank">Linux USB Project</a> for Linux based operating systems.
 - <a class="el" href="https://developer.apple.com/documentation/driverkit" target="_blank">DriverKit</a> for Apple OS.

Software Utilities
------------------
The USB Component comes with a set of software utilities that you can use as templates to create your own programs for the
USB Host computer. The utilities are specific for the different USB Device Classes. These are the available utilities:
- The \ref hid_client_app  can be used to interact with an USB HID Device. You can toggle LEDs on the development board
  and check the state of the on-board push-buttons. 
- The \ref winusb_app can be used to test the connection between the USB Host PC and the client device. This application
  uses WinUSB driver on the USB Host PC and demonstrates the basics of using the Microsoft Foundation Classes and can be 
  used as a starting point for writing your application.

\section hid_client_app HID Client

If you are using the \ref dev_hid_tutorial code, there's a way to test the functionality of that code together with a
Windows PC. The \b HIDClient.exe utility is located in "install_dir\ARM\Utilities\HID_Client\Release" folder 
(where "install_dir" refers to the installation directory of Arm Keil MDK, default "C:\Keil_v5") and can run stand-alone 
without the need to install the software. To check the client utility with your board, do the following:
-# Download the USB Device \b HID application to your board.
-# Verify all jumper settings on the board.
-# Connect the board to a Windows PC. The PC should recognize the HID device and install the correct driver automatically.
-# Run \b HIDClient.exe.
-# Select the \b Device to establish the communication channel.
-# Test the application by pressing the correct buttons (refer to the application's \b Abstract.txt file) on your development
   board and/or check the right boxes in the client application to see the LEDs flashing.

\image html "hid_client_test.png"
   
\subsection client_app_cpp HID Client Source Code

The source code of the HID Client application is available in "install_dir\ARM\Utilities\HID_Client". Visual Studio 2005 and 2010
based projects are available (HIDClient.vproj). The structure of the project is as follows:

\image html "HIDClientSolutionExplorer.png"

Header Files
------------
- \b HID.h includes the function declarations of the functions that are defined in \b HID.cpp.
- \b HIDClient.h is the main header file for the application. It includes other project specific headers (including Resource.h)
  and declares the \b CHIDClientApp application class.
- \b HIDClientDlg.h defines the behavior of the application's main dialog.

Resource Files
--------------
- \b HIDClient.ico is an icon file, which is used as the application's icon. This icon is included by the main resource file
  \b HIDClient.rc.
- \b HIDClient.rc2 contains resources that are not edited by Microsoft Visual C++. You should place all resources not editable
  by the resource editor in this file.

Source Files
------------
- \b HID.cpp contains the necessary functions that are used in this example application to communicate with an USB HID device.
  All available functions in Windows for HID interaction are explained here:
  <a class="el" href="https://learn.microsoft.com/en-us/windows-hardware/drivers/hid/introduction-to-hid-concepts" target=_blank>Introduction to HID Concepts</a>.
  The function:
  - \b HID_Init initializes the HID class to be used with the USB Host.
  - \b HID_UnInit de-initializes the HID class from the USB Host.
  - \b HID_FindDevices scans the USB Bus and lists all available HID devices for connection to the application. This
    information is obtained from the \ref USB_Device_Descriptor that is generated by the USB Component using the configuration
	files.
  - \b HID_GetName evaluates the \ref prod_string "Product String" of the device to be shown in the drop down box
    of the application.
  - \b HID_GetInputReportSize extracts the value of \c USBD_HIDn_IN_REPORT_MAX_SZ as specified in the
    \ref usbd_hidFunctions_conf "USBD_Config_HID_n.h" file.
  - \b HID_GetOutputReportSize extracts the value of \c USBD_HIDn_OUT_REPORT_MAX_SZ as specified in the
    \ref usbd_hidFunctions_conf "USBD_Config_HID_n.h" file.
  - \b HID_GetFeatureReportSize extracts the value of \c USBD_HIDn_FEAT_REPORT_MAX_SZ as specified in the
    \ref usbd_hidFunctions_conf "USBD_Config_HID_n.h" file.
  - \b HID_Open opens the device.
  - \b HID_GetSelectedDevice returns the selected device.
  - \b HID_Close closes the device.
  - \b HID_Read initiates a \ref USBD_HIDn_GetReport within the device to send data to the USB Host.
  - \b HID_Write triggers a \ref USBD_HIDn_SetReport within the device to read data sent from the USB Host.
  - \b HID_GetFeature and \b HID_SetFeature work on the USB HID Device's feature report (which is optional).
- \b HIDClient.cpp is the main application source file that contains the application class \b CHIDClientApp.
- \b HIDClient.rc is a listing of all of the Microsoft Windows resources that the program uses (located in the res subdirectory).
- \b HIDClientDlg.cpp implements the code of the client's dialog and calls the functions specified in \b HID.cpp. This is 
  the actual place where the interaction between the USB Host and the USB Device is defined. 
  
  
\section winusb_app WinUSB Test

If you are following the \ref dev_cc_tutorial tutorial, you can test the connection between your custom class USB device and
a Microsoft Windows PC with this application. The binary \b WinUSB_Test.exe (which does not require installation) is available in the
"install_dir\ARM\PACK\Keil\MDK-Middleware\x.y.z\Utilities\WinUSB_Test\Release" folder (where "install_dir" refers to the
installation directory of Arm Keil MDK, default "C:\Keil_v5" and x >= 7, y >= 5, z >= 0).

To check the WinUSB utility with your board, do the following:
-# Download the USB Device \b WinUSB_Echo application to your board.
-# Verify all jumper settings on the board.
-# Connect the board to a Windows PC. The PC should recognize the WinUSB device and install the correct driver automatically.
-# Run \b WinUSB_Test.exe.
-# Select the \b Device to establish the communication channel.
-# For further settings and tests refer to \ref dev_cc_tutorial



\image html "WinUSB_Test_application.png"
\n

\subsection winusb_app_cpp WinUSB application source code

The WinUSB source code can be found in "install_dir\ARM\PACK\Keil\MDK-Middleware\x.y.z\Utilities\WinUSB_Test".
A Visual Studio 2010 (or later) based solution named WinUSB_Test.sln is available. The following is a summary of what you
will find in each of the files that make up your WinUSB_Test application.

\image html WinUSB_test_sln.png

Header Files
------------
- <b>.\\USB\\WinUsbIF.h</b> includes the function declarations of the functions that are defined in <b>.\\USB\\WinUsbIF.cpp</b>.
- <b>.\\WinUSB_Test\\WinUSB_Test.h</b> is the main header file for the application. It includes other project specific headers
  (including resource.h) and declares the \b CWinUSB_TestApp application class.
- <b>.\\WinUSB_Test\\WinUSB_TestDlg.h</b> defines the behavior of the application's main dialog.

Resource Files
--------------
- <b>.\\WinUSB_Test\\res\\WinUSB_Test.ico</b> is an icon file, which is used as the application's icon. This icon is included
  by the main resource file <b>.\\WinUSB_Test\\WinUSB_Test.rc</b>.
- <b>.\\WinUSB_Test\\res\\Refresh_grey.ico</b> is an icon file, which is used for the refresh button in the application.
- <b>.\\WinUSB_Test\\res\\WinUSB_Test.rc2</b> contains resources that are not edited by Microsoft Visual C++. You should
  place all resources not editable by the resource editor in this file.

Source Files
------------
- <b>.\\USB\\WinUsbIF.cpp</b> contains the necessary functions that are used in this example application to communicate with
  a USB device via the WinUSB interface. Refer to the 
  <a class="el" href="https://learn.microsoft.com/en-us/windows/win32/api/winusb/" target=_blank>WinUSB Functions</a>
  documentation for an overview of the available functions.	The function:
  - \b WinUsbIF_Initialize initializes the WinUSB interface to be used with the USB Host.
  - \b WinUsbIF_Uninitialize de-initializes the WinUSB interface from the USB Host.
  - \b WinUsbIF_SetGUID sets the USB interface Globally Unique Identifier (GUID).
  - \b WinUsbIF_GetGUID retrieves the USB interface Globally Unique Identifier (GUID).
  - \b WinUsbIF_FindDevices scans the USB Bus and lists all available devices, containing interface with set GUID, 
    for connection to the application.
  - \b WinUsbIF_GetNumOfInterfaces retrieves the number of interfaces available for a device.
  - \b WinUsbIF_GetEndpointsMask retrieves the endpoint mask of the selected device.
  - \b WinUsbIF_GetName evaluates the VID + PID + Serial Number or Unique ID of the device to be shown in the drop down box
    of the application.
  - \b WinUsbIF_GetManufacturerString retrieves the device's manufacturer string.
  - \b WinUsbIF_GetProductString retrieves the device's product string.
  - \b WinUsbIF_GetSerialNumberString retrieves the device's serial number string.
  - \b WinUsbIF_GetInterfaceString retrieves the device's interface string.
  - \b WinUsbIF_GetVID retrieves the device's vendor ID.
  - \b WinUsbIF_GetPID retrieves the device's product ID.
  - \b WinUsbIF_OpenDevice opens the device for USB communication.
  - \b WinUsbIF_CloseDevice closes the device from USB communication.
  - \b WinUsbIF_ControlTransfer executes a control transfer on the USB Bus.
  - \b WinUsbIF_WritePipe executes an USB OUT transfer on a selected pipe to a bulk or interrupt endpoint of the device.
  - \b WinUsbIF_ReadPipe executes an USB IN transfer on a selected pipe to a bulk or interrupt endpoint of the device.
  - \b WinUsbIF_AbortPipe aborts pending pipe transfers.
  - \b WinUsbIF_FlushPipe flushes the cached data of a pipe.
  - \b WinUsbIF_ResetPipe resets a pipe.
  - \b WinUsbIF_GetOverlappedResult retrieves the overlapped result.
- <b>.\\WinUSB_Test\\WinUSB_Test.cpp</b> is the main application source file that contains the application class
  \b CWinUSB_TestApp.
- <b>.\\WinUSB_Test\\WinUSB_Test.rc</b> is a listing of all of the Microsoft Windows resources that the program uses (located
  in the <b>.\\WinUSB_Test\\res</b> subdirectory).
- <b>.\\WinUSB_Test\\WinUSB_TestDlg.cpp</b> implements the code of the client's dialog and calls the functions specified in
  <b>.\\USB\\WinUsbIF.cpp</b>. This is the actual place where the interaction between the USB Host and the USB Device is
  defined. 
*/